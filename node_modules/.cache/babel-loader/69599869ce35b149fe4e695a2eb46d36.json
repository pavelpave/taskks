{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\n\nvar sysPath = require('path');\n\nvar readdirp = require('readdirp');\n\nvar fsevents;\n\ntry {\n  fsevents = require('fsevents');\n} catch (error) {} // fsevents instance helper functions\n// object to hold per-process fsevents instances\n// (may be shared across chokidar FSWatcher instances)\n\n\nvar FSEventsWatchers = Object.create(null); // Threshold of duplicate path prefixes at which to start\n// consolidating going forward\n\nvar consolidateThreshhold = 10; // Private function: Instantiates the fsevents interface\n// * path       - string, path to be watched\n// * callback   - function, called when fsevents is bound and ready\n// Returns new fsevents instance\n\nfunction createFSEventsInstance(path, callback) {\n  return new fsevents(path).on('fsevent', callback).start();\n} // Private function: Instantiates the fsevents interface or binds listeners\n// to an existing one covering the same file tree\n// * path       - string, path to be watched\n// * realPath   - string, real path (in case of symlinks)\n// * listener   - function, called when fsevents emits events\n// * rawEmitter - function, passes data to listeners of the 'raw' event\n// Returns close function\n\n\nfunction setFSEventsListener(path, realPath, listener, rawEmitter) {\n  var watchPath = sysPath.extname(path) ? sysPath.dirname(path) : path;\n  var watchContainer;\n  var parentPath = sysPath.dirname(watchPath); // If we've accumulated a substantial number of paths that\n  // could have been consolidated by watching one directory\n  // above the current one, create a watcher on the parent\n  // path instead, so that we do consolidate going forward.\n\n  if (couldConsolidate(parentPath)) {\n    watchPath = parentPath;\n  }\n\n  var resolvedPath = sysPath.resolve(path);\n  var hasSymlink = resolvedPath !== realPath;\n\n  function filteredListener(fullPath, flags, info) {\n    if (hasSymlink) fullPath = fullPath.replace(realPath, resolvedPath);\n    if (fullPath === resolvedPath || !fullPath.indexOf(resolvedPath + sysPath.sep)) listener(fullPath, flags, info);\n  } // check if there is already a watcher on a parent path\n  // modifies `watchPath` to the parent path when it finds a match\n\n\n  function watchedParent() {\n    return Object.keys(FSEventsWatchers).some(function (watchedPath) {\n      // condition is met when indexOf returns 0\n      if (!realPath.indexOf(sysPath.resolve(watchedPath) + sysPath.sep)) {\n        watchPath = watchedPath;\n        return true;\n      }\n    });\n  }\n\n  if (watchPath in FSEventsWatchers || watchedParent()) {\n    watchContainer = FSEventsWatchers[watchPath];\n    watchContainer.listeners.push(filteredListener);\n  } else {\n    watchContainer = FSEventsWatchers[watchPath] = {\n      listeners: [filteredListener],\n      rawEmitters: [rawEmitter],\n      watcher: createFSEventsInstance(watchPath, function (fullPath, flags) {\n        var info = fsevents.getInfo(fullPath, flags);\n        watchContainer.listeners.forEach(function (listener) {\n          listener(fullPath, flags, info);\n        });\n        watchContainer.rawEmitters.forEach(function (emitter) {\n          emitter(info.event, fullPath, info);\n        });\n      })\n    };\n  }\n\n  var listenerIndex = watchContainer.listeners.length - 1; // removes this instance's listeners and closes the underlying fsevents\n  // instance if there are no more listeners left\n\n  return function close() {\n    delete watchContainer.listeners[listenerIndex];\n    delete watchContainer.rawEmitters[listenerIndex];\n\n    if (!Object.keys(watchContainer.listeners).length) {\n      watchContainer.watcher.stop();\n      delete FSEventsWatchers[watchPath];\n    }\n  };\n} // Decide whether or not we should start a new higher-level\n// parent watcher\n\n\nfunction couldConsolidate(path) {\n  var keys = Object.keys(FSEventsWatchers);\n  var count = 0;\n\n  for (var i = 0, len = keys.length; i < len; ++i) {\n    var watchPath = keys[i];\n\n    if (watchPath.indexOf(path) === 0) {\n      count++;\n\n      if (count >= consolidateThreshhold) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n} // returns boolean indicating whether fsevents can be used\n\n\nfunction canUse() {\n  return fsevents && Object.keys(FSEventsWatchers).length < 128;\n} // determines subdirectory traversal levels from root to path\n\n\nfunction depth(path, root) {\n  var i = 0;\n\n  while (!path.indexOf(root) && (path = sysPath.dirname(path)) !== root) {\n    i++;\n  }\n\n  return i;\n} // fake constructor for attaching fsevents-specific prototype methods that\n// will be copied to FSWatcher's prototype\n\n\nfunction FsEventsHandler() {} // Private method: Handle symlinks encountered during directory scan\n// * watchPath  - string, file/dir path to be watched with fsevents\n// * realPath   - string, real path (in case of symlinks)\n// * transform  - function, path transformer\n// * globFilter - function, path filter in case a glob pattern was provided\n// Returns close function for the watcher instance\n\n\nFsEventsHandler.prototype._watchWithFsEvents = function (watchPath, realPath, transform, globFilter) {\n  if (this._isIgnored(watchPath)) return;\n\n  var watchCallback = function (fullPath, flags, info) {\n    if (this.options.depth !== undefined && depth(fullPath, realPath) > this.options.depth) return;\n    var path = transform(sysPath.join(watchPath, sysPath.relative(watchPath, fullPath)));\n    if (globFilter && !globFilter(path)) return; // ensure directories are tracked\n\n    var parent = sysPath.dirname(path);\n    var item = sysPath.basename(path);\n\n    var watchedDir = this._getWatchedDir(info.type === 'directory' ? path : parent);\n\n    var checkIgnored = function (stats) {\n      if (this._isIgnored(path, stats)) {\n        this._ignoredPaths[path] = true;\n\n        if (stats && stats.isDirectory()) {\n          this._ignoredPaths[path + '/**/*'] = true;\n        }\n\n        return true;\n      } else {\n        delete this._ignoredPaths[path];\n        delete this._ignoredPaths[path + '/**/*'];\n      }\n    }.bind(this);\n\n    var handleEvent = function (event) {\n      if (checkIgnored()) return;\n\n      if (event === 'unlink') {\n        // suppress unlink events on never before seen files\n        if (info.type === 'directory' || watchedDir.has(item)) {\n          this._remove(parent, item);\n        }\n      } else {\n        if (event === 'add') {\n          // track new directories\n          if (info.type === 'directory') this._getWatchedDir(path);\n\n          if (info.type === 'symlink' && this.options.followSymlinks) {\n            // push symlinks back to the top of the stack to get handled\n            var curDepth = this.options.depth === undefined ? undefined : depth(fullPath, realPath) + 1;\n            return this._addToFsEvents(path, false, true, curDepth);\n          } else {\n            // track new paths\n            // (other than symlinks being followed, which will be tracked soon)\n            this._getWatchedDir(parent).add(item);\n          }\n        }\n\n        var eventName = info.type === 'directory' ? event + 'Dir' : event;\n\n        this._emit(eventName, path);\n\n        if (eventName === 'addDir') this._addToFsEvents(path, false, true);\n      }\n    }.bind(this);\n\n    function addOrChange() {\n      handleEvent(watchedDir.has(item) ? 'change' : 'add');\n    }\n\n    function checkFd() {\n      fs.open(path, 'r', function (error, fd) {\n        if (fd) fs.close(fd);\n        error && error.code !== 'EACCES' ? handleEvent('unlink') : addOrChange();\n      });\n    } // correct for wrong events emitted\n\n\n    var wrongEventFlags = [69888, 70400, 71424, 72704, 73472, 131328, 131840, 262912];\n\n    if (wrongEventFlags.indexOf(flags) !== -1 || info.event === 'unknown') {\n      if (typeof this.options.ignored === 'function') {\n        fs.stat(path, function (error, stats) {\n          if (checkIgnored(stats)) return;\n          stats ? addOrChange() : handleEvent('unlink');\n        });\n      } else {\n        checkFd();\n      }\n    } else {\n      switch (info.event) {\n        case 'created':\n        case 'modified':\n          return addOrChange();\n\n        case 'deleted':\n        case 'moved':\n          return checkFd();\n      }\n    }\n  }.bind(this);\n\n  var closer = setFSEventsListener(watchPath, realPath, watchCallback, this.emit.bind(this, 'raw'));\n\n  this._emitReady();\n\n  return closer;\n}; // Private method: Handle symlinks encountered during directory scan\n// * linkPath   - string, path to symlink\n// * fullPath   - string, absolute path to the symlink\n// * transform  - function, pre-existing path transformer\n// * curDepth   - int, level of subdirectories traversed to where symlink is\n// Returns nothing\n\n\nFsEventsHandler.prototype._handleFsEventsSymlink = function (linkPath, fullPath, transform, curDepth) {\n  // don't follow the same symlink more than once\n  if (this._symlinkPaths[fullPath]) return;else this._symlinkPaths[fullPath] = true;\n  this._readyCount++;\n  fs.realpath(linkPath, function (error, linkTarget) {\n    if (this._handleError(error) || this._isIgnored(linkTarget)) {\n      return this._emitReady();\n    }\n\n    this._readyCount++; // add the linkTarget for watching with a wrapper for transform\n    // that causes emitted paths to incorporate the link's path\n\n    this._addToFsEvents(linkTarget || linkPath, function (path) {\n      var dotSlash = '.' + sysPath.sep;\n      var aliasedPath = linkPath;\n\n      if (linkTarget && linkTarget !== dotSlash) {\n        aliasedPath = path.replace(linkTarget, linkPath);\n      } else if (path !== dotSlash) {\n        aliasedPath = sysPath.join(linkPath, path);\n      }\n\n      return transform(aliasedPath);\n    }, false, curDepth);\n  }.bind(this));\n}; // Private method: Handle added path with fsevents\n// * path       - string, file/directory path or glob pattern\n// * transform  - function, converts working path to what the user expects\n// * forceAdd   - boolean, ensure add is emitted\n// * priorDepth - int, level of subdirectories already traversed\n// Returns nothing\n\n\nFsEventsHandler.prototype._addToFsEvents = function (path, transform, forceAdd, priorDepth) {\n  // applies transform if provided, otherwise returns same value\n  var processPath = typeof transform === 'function' ? transform : function (val) {\n    return val;\n  };\n\n  var emitAdd = function (newPath, stats) {\n    var pp = processPath(newPath);\n    var isDir = stats.isDirectory();\n\n    var dirObj = this._getWatchedDir(sysPath.dirname(pp));\n\n    var base = sysPath.basename(pp); // ensure empty dirs get tracked\n\n    if (isDir) this._getWatchedDir(pp);\n    if (dirObj.has(base)) return;\n    dirObj.add(base);\n\n    if (!this.options.ignoreInitial || forceAdd === true) {\n      this._emit(isDir ? 'addDir' : 'add', pp, stats);\n    }\n  }.bind(this);\n\n  var wh = this._getWatchHelpers(path); // evaluate what is at the path we're being asked to watch\n\n\n  fs[wh.statMethod](wh.watchPath, function (error, stats) {\n    if (this._handleError(error) || this._isIgnored(wh.watchPath, stats)) {\n      this._emitReady();\n\n      return this._emitReady();\n    }\n\n    if (stats.isDirectory()) {\n      // emit addDir unless this is a glob parent\n      if (!wh.globFilter) emitAdd(processPath(path), stats); // don't recurse further if it would exceed depth setting\n\n      if (priorDepth && priorDepth > this.options.depth) return; // scan the contents of the dir\n\n      readdirp({\n        root: wh.watchPath,\n        entryType: 'all',\n        fileFilter: wh.filterPath,\n        directoryFilter: wh.filterDir,\n        lstat: true,\n        depth: this.options.depth - (priorDepth || 0)\n      }).on('data', function (entry) {\n        // need to check filterPath on dirs b/c filterDir is less restrictive\n        if (entry.stat.isDirectory() && !wh.filterPath(entry)) return;\n        var joinedPath = sysPath.join(wh.watchPath, entry.path);\n        var fullPath = entry.fullPath;\n\n        if (wh.followSymlinks && entry.stat.isSymbolicLink()) {\n          // preserve the current depth here since it can't be derived from\n          // real paths past the symlink\n          var curDepth = this.options.depth === undefined ? undefined : depth(joinedPath, sysPath.resolve(wh.watchPath)) + 1;\n\n          this._handleFsEventsSymlink(joinedPath, fullPath, processPath, curDepth);\n        } else {\n          emitAdd(joinedPath, entry.stat);\n        }\n      }.bind(this)).on('error', function () {// Ignore readdirp errors\n      }).on('end', this._emitReady);\n    } else {\n      emitAdd(wh.watchPath, stats);\n\n      this._emitReady();\n    }\n  }.bind(this));\n\n  if (this.options.persistent && forceAdd !== true) {\n    var initWatch = function (error, realPath) {\n      if (this.closed) return;\n\n      var closer = this._watchWithFsEvents(wh.watchPath, sysPath.resolve(realPath || wh.watchPath), processPath, wh.globFilter);\n\n      if (closer) this._closers[path] = closer;\n    }.bind(this);\n\n    if (typeof transform === 'function') {\n      // realpath has already been resolved\n      initWatch();\n    } else {\n      fs.realpath(wh.watchPath, initWatch);\n    }\n  }\n};\n\nmodule.exports = FsEventsHandler;\nmodule.exports.canUse = canUse;","map":null,"metadata":{},"sourceType":"script"}