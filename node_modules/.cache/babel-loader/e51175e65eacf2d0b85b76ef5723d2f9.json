{"ast":null,"code":"var _jsxFileName = \"/home/garpix/task_react_App/myapp/src/ui/GroupButton.jsx\";\nimport React, { Component } from 'react';\nimport axioPost from './axioButton';\nimport './styles/style.css';\n\nclass GroupButton extends Component {\n  constructor(props) {\n    super(props);\n    this.clickBurg = this.clickBurg.bind(this);\n    this.funClickClose = this.funClickClose.bind(this);\n    this.funClickFinishTask = this.funClickFinishTask.bind(this);\n    this.funClickStopTask = this.funClickStopTask.bind(this);\n    this.funClickOpenTask = this.funClickOpenTask.bind(this);\n    this.funClickReopenTask = this.funClickReopenTask.bind(this);\n    this.state = props.state;\n    this.rerenderTask = props.rerenderTask;\n    this.el = props.el;\n  }\n\n  clickBurg(e) {\n    let elem = e.target.getAttribute('data');\n    this.state.buttonCliked = elem;\n    console.log(this.state);\n    return this.setState(this.state);\n  } // funDrawBlockButton() {\n  //     if (this.state.buttonCliked == )\n  // }\n\n\n  async funClickClose() {\n    let urlProps = '/close/';\n    await new axioPost(this.el.id, urlProps).axioRequests();\n    this.rerenderTask();\n  }\n\n  async funClickStopTask() {\n    let urlProps = '/stop_develop/';\n    await new axioPost(this.el.id, urlProps).axioRequests();\n    this.rerenderTask();\n  }\n\n  async funClickOpenTask() {\n    let urlProps = '/start_develop/';\n    await new axioPost(this.el.id, urlProps).axioRequests();\n    this.rerenderTask();\n  }\n\n  async funClickFinishTask() {\n    let urlProps = '/finish/';\n    await new axioPost(this.el.id, urlProps).axioRequests();\n    this.rerenderTask();\n  }\n\n  async funClickReopenTask() {\n    let urlProps = '/reopen/';\n    await new axioPost(this.el.id, urlProps).axioRequests();\n    this.rerenderTask();\n  }\n\n  render() {\n    debugger;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: this.funClickOpenTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"\\u0412\\u0437\\u044F\\u0442\\u044C \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443\"), React.createElement(\"div\", {\n      className: \"Burger_button\",\n      data: this.el.id,\n      onClick: this.clickBurg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      data: this.el.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.state.buttonCliked === String(this.el.id) ? React.createElement(\"div\", {\n      className: \"clickedBurger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, this.el.can_close ? React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-danger\",\n      onClick: this.funClickClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443\") : React.createElement(React.Fragment, null), this.el.can_finish ? React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-success\",\n      onClick: this.funClickFinishTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"\\u0412\\u044B\\u043F\\u043E\\u043B\\u043D\\u0435\\u043D\\u043D\\u043E\") : React.createElement(React.Fragment, null), this.el.can_reopen ? React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-dark\",\n      onClick: this.funClickReopenTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"\\u041F\\u0435\\u0440\\u0435\\u043E\\u0442\\u043A\\u0440\\u044B\\u0442\\u044C \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443\") : React.createElement(React.Fragment, null), this.el.can_stop_develop ? React.createElement(\"button\", {\n      className: \"btn-warning\",\n      onClick: this.funClickStopTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"\\u041E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C\") : React.createElement(React.Fragment, null)) : React.createElement(React.Fragment, null)), React.createElement(\"a\", {\n      href: \"#\",\n      className: \"link_task\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"\\u043F\\u0435\\u0440\\u0435\\u0439\\u0442\\u0438\"));\n  }\n\n}\n\nexport default GroupButton;","map":{"version":3,"sources":["/home/garpix/task_react_App/myapp/src/ui/GroupButton.jsx"],"names":["React","Component","axioPost","GroupButton","constructor","props","clickBurg","bind","funClickClose","funClickFinishTask","funClickStopTask","funClickOpenTask","funClickReopenTask","state","rerenderTask","el","e","elem","target","getAttribute","buttonCliked","console","log","setState","urlProps","id","axioRequests","render","String","can_close","can_finish","can_reopen","can_stop_develop"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport axioPost from './axioButton'\nimport './styles/style.css'\n\n\nclass GroupButton extends Component {\n    constructor(props) {\n        super(props);\n        this.clickBurg = this.clickBurg.bind(this)\n        this.funClickClose = this.funClickClose.bind(this)\n        this.funClickFinishTask = this.funClickFinishTask.bind(this)\n        this.funClickStopTask = this.funClickStopTask.bind(this)\n        this.funClickOpenTask = this.funClickOpenTask.bind(this)\n        this.funClickReopenTask = this.funClickReopenTask.bind(this)\n        this.state = props.state\n        this.rerenderTask = props.rerenderTask\n        this.el = props.el\n    }\n    clickBurg(e) {\n\n        let elem = e.target.getAttribute('data')\n        this.state.buttonCliked = elem\n        console.log(this.state);\n        return this.setState(this.state)\n\n    }\n    // funDrawBlockButton() {\n    //     if (this.state.buttonCliked == )\n    // }\n    async  funClickClose() {\n        let urlProps = '/close/'\n        await new axioPost(this.el.id, urlProps).axioRequests()\n\n        this.rerenderTask()\n    }\n    async funClickStopTask() {\n        let urlProps = '/stop_develop/'\n        await new axioPost(this.el.id, urlProps).axioRequests()\n\n        this.rerenderTask()\n\n    }\n    async funClickOpenTask() {\n        let urlProps = '/start_develop/'\n        await new axioPost(this.el.id, urlProps).axioRequests()\n\n\n        this.rerenderTask()\n\n    }\n    async funClickFinishTask() {\n        let urlProps = '/finish/'\n        await new axioPost(this.el.id, urlProps).axioRequests()\n\n        this.rerenderTask()\n    }\n    async funClickReopenTask() {\n        let urlProps = '/reopen/'\n        await new axioPost(this.el.id, urlProps).axioRequests()\n\n        this.rerenderTask()\n\n    }\n    render() {\n        debugger\n        return (\n            <div>\n\n\n\n                <button className='btn btn-primary' onClick={this.funClickOpenTask}>Взять задачу</button>\n\n                <div className=\"Burger_button\" data={this.el.id} onClick={this.clickBurg}>\n\n                    <span></span>\n                    <span></span>\n                    <span></span>\n                </div>\n                <div data={this.el.id}>\n                    {this.state.buttonCliked === String(this.el.id)  ? (\n                        <div className='clickedBurger'>\n                            {this.el.can_close ? (\n                                <button type=\"button\" className='btn btn-danger' onClick={this.funClickClose}>Закрыть задачу</button>\n                            ) : <></>}\n\n                            {/* <button type=\"button\" className='btn btn-secondary' onClick={this.funClickStartTask}>Редактировать задачу</button> */}\n\n                            {this.el.can_finish ? (\n                                <button type=\"button\" className='btn btn-success' onClick={this.funClickFinishTask}>Выполненно</button>\n                            ) : <></>}\n\n                            {this.el.can_reopen ? (\n                                <button type=\"button\" className='btn btn-dark' onClick={this.funClickReopenTask}>Переоткрыть задачу</button>\n                            ) : <></>}\n\n                            {this.el.can_stop_develop ? (\n                                <button className='btn-warning' onClick={this.funClickStopTask}>Остановить</button>) : <></>}\n\n\n                        </div>) : <></>}\n                </div>\n\n\n                <a href=\"#\" className=\"link_task\">перейти</a>\n            </div>\n        )\n    }\n}\nexport default GroupButton"]},"metadata":{},"sourceType":"module"}