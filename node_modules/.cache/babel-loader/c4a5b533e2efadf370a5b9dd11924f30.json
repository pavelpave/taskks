{"ast":null,"code":"/**\r\n * node-compress-commons\r\n *\r\n * Copyright (c) 2014 Chris Talkington, contributors.\r\n * Licensed under the MIT license.\r\n * https://github.com/archiverjs/node-compress-commons/blob/master/LICENSE-MIT\r\n */\nvar inherits = require('util').inherits;\n\nvar normalizePath = require('normalize-path');\n\nvar ArchiveEntry = require('../archive-entry');\n\nvar GeneralPurposeBit = require('./general-purpose-bit');\n\nvar UnixStat = require('./unix-stat');\n\nvar constants = require('./constants');\n\nvar zipUtil = require('./util');\n\nvar ZipArchiveEntry = module.exports = function (name) {\n  if (!(this instanceof ZipArchiveEntry)) {\n    return new ZipArchiveEntry(name);\n  }\n\n  ArchiveEntry.call(this);\n  this.platform = constants.PLATFORM_FAT;\n  this.method = -1;\n  this.name = null;\n  this.size = 0;\n  this.csize = 0;\n  this.gpb = new GeneralPurposeBit();\n  this.crc = 0;\n  this.time = -1;\n  this.minver = constants.MIN_VERSION_INITIAL;\n  this.mode = -1;\n  this.extra = null;\n  this.exattr = 0;\n  this.inattr = 0;\n  this.comment = null;\n\n  if (name) {\n    this.setName(name);\n  }\n};\n\ninherits(ZipArchiveEntry, ArchiveEntry);\n/**\r\n * Returns the extra fields related to the entry.\r\n *\r\n * @returns {Buffer}\r\n */\n\nZipArchiveEntry.prototype.getCentralDirectoryExtra = function () {\n  return this.getExtra();\n};\n/**\r\n * Returns the comment set for the entry.\r\n *\r\n * @returns {string}\r\n */\n\n\nZipArchiveEntry.prototype.getComment = function () {\n  return this.comment !== null ? this.comment : '';\n};\n/**\r\n * Returns the compressed size of the entry.\r\n *\r\n * @returns {number}\r\n */\n\n\nZipArchiveEntry.prototype.getCompressedSize = function () {\n  return this.csize;\n};\n/**\r\n * Returns the CRC32 digest for the entry.\r\n *\r\n * @returns {number}\r\n */\n\n\nZipArchiveEntry.prototype.getCrc = function () {\n  return this.crc;\n};\n/**\r\n * Returns the external file attributes for the entry.\r\n *\r\n * @returns {number}\r\n */\n\n\nZipArchiveEntry.prototype.getExternalAttributes = function () {\n  return this.exattr;\n};\n/**\r\n * Returns the extra fields related to the entry.\r\n *\r\n * @returns {Buffer}\r\n */\n\n\nZipArchiveEntry.prototype.getExtra = function () {\n  return this.extra !== null ? this.extra : constants.EMPTY;\n};\n/**\r\n * Returns the general purpose bits related to the entry.\r\n *\r\n * @returns {GeneralPurposeBit}\r\n */\n\n\nZipArchiveEntry.prototype.getGeneralPurposeBit = function () {\n  return this.gpb;\n};\n/**\r\n * Returns the internal file attributes for the entry.\r\n *\r\n * @returns {number}\r\n */\n\n\nZipArchiveEntry.prototype.getInternalAttributes = function () {\n  return this.inattr;\n};\n/**\r\n * Returns the last modified date of the entry.\r\n *\r\n * @returns {number}\r\n */\n\n\nZipArchiveEntry.prototype.getLastModifiedDate = function () {\n  return this.getTime();\n};\n/**\r\n * Returns the extra fields related to the entry.\r\n *\r\n * @returns {Buffer}\r\n */\n\n\nZipArchiveEntry.prototype.getLocalFileDataExtra = function () {\n  return this.getExtra();\n};\n/**\r\n * Returns the compression method used on the entry.\r\n *\r\n * @returns {number}\r\n */\n\n\nZipArchiveEntry.prototype.getMethod = function () {\n  return this.method;\n};\n/**\r\n * Returns the filename of the entry.\r\n *\r\n * @returns {string}\r\n */\n\n\nZipArchiveEntry.prototype.getName = function () {\n  return this.name;\n};\n/**\r\n * Returns the platform on which the entry was made.\r\n *\r\n * @returns {number}\r\n */\n\n\nZipArchiveEntry.prototype.getPlatform = function () {\n  return this.platform;\n};\n/**\r\n * Returns the size of the entry.\r\n *\r\n * @returns {number}\r\n */\n\n\nZipArchiveEntry.prototype.getSize = function () {\n  return this.size;\n};\n/**\r\n * Returns a date object representing the last modified date of the entry.\r\n *\r\n * @returns {number|Date}\r\n */\n\n\nZipArchiveEntry.prototype.getTime = function () {\n  return this.time !== -1 ? zipUtil.dosToDate(this.time) : -1;\n};\n/**\r\n * Returns the DOS timestamp for the entry.\r\n *\r\n * @returns {number}\r\n */\n\n\nZipArchiveEntry.prototype.getTimeDos = function () {\n  return this.time !== -1 ? this.time : 0;\n};\n/**\r\n * Returns the UNIX file permissions for the entry.\r\n *\r\n * @returns {number}\r\n */\n\n\nZipArchiveEntry.prototype.getUnixMode = function () {\n  return this.platform !== constants.PLATFORM_UNIX ? 0 : this.getExternalAttributes() >> constants.SHORT_SHIFT & constants.SHORT_MASK;\n};\n/**\r\n * Returns the version of ZIP needed to extract the entry.\r\n *\r\n * @returns {number}\r\n */\n\n\nZipArchiveEntry.prototype.getVersionNeededToExtract = function () {\n  return this.minver;\n};\n/**\r\n * Sets the comment of the entry.\r\n *\r\n * @param comment\r\n */\n\n\nZipArchiveEntry.prototype.setComment = function (comment) {\n  if (Buffer.byteLength(comment) !== comment.length) {\n    this.getGeneralPurposeBit().useUTF8ForNames(true);\n  }\n\n  this.comment = comment;\n};\n/**\r\n * Sets the compressed size of the entry.\r\n *\r\n * @param size\r\n */\n\n\nZipArchiveEntry.prototype.setCompressedSize = function (size) {\n  if (size < 0) {\n    throw new Error('invalid entry compressed size');\n  }\n\n  this.csize = size;\n};\n/**\r\n * Sets the checksum of the entry.\r\n *\r\n * @param crc\r\n */\n\n\nZipArchiveEntry.prototype.setCrc = function (crc) {\n  if (crc < 0) {\n    throw new Error('invalid entry crc32');\n  }\n\n  this.crc = crc;\n};\n/**\r\n * Sets the external file attributes of the entry.\r\n *\r\n * @param attr\r\n */\n\n\nZipArchiveEntry.prototype.setExternalAttributes = function (attr) {\n  this.exattr = attr >>> 0;\n};\n/**\r\n * Sets the extra fields related to the entry.\r\n *\r\n * @param extra\r\n */\n\n\nZipArchiveEntry.prototype.setExtra = function (extra) {\n  this.extra = extra;\n};\n/**\r\n * Sets the general purpose bits related to the entry.\r\n *\r\n * @param gpb\r\n */\n\n\nZipArchiveEntry.prototype.setGeneralPurposeBit = function (gpb) {\n  if (!(gpb instanceof GeneralPurposeBit)) {\n    throw new Error('invalid entry GeneralPurposeBit');\n  }\n\n  this.gpb = gpb;\n};\n/**\r\n * Sets the internal file attributes of the entry.\r\n *\r\n * @param attr\r\n */\n\n\nZipArchiveEntry.prototype.setInternalAttributes = function (attr) {\n  this.inattr = attr;\n};\n/**\r\n * Sets the compression method of the entry.\r\n *\r\n * @param method\r\n */\n\n\nZipArchiveEntry.prototype.setMethod = function (method) {\n  if (method < 0) {\n    throw new Error('invalid entry compression method');\n  }\n\n  this.method = method;\n};\n/**\r\n * Sets the name of the entry.\r\n *\r\n * @param name\r\n */\n\n\nZipArchiveEntry.prototype.setName = function (name) {\n  name = normalizePath(name, false).replace(/^\\w+:/, '').replace(/^(\\.\\.\\/|\\/)+/, '');\n\n  if (Buffer.byteLength(name) !== name.length) {\n    this.getGeneralPurposeBit().useUTF8ForNames(true);\n  }\n\n  this.name = name;\n};\n/**\r\n * Sets the platform on which the entry was made.\r\n *\r\n * @param platform\r\n */\n\n\nZipArchiveEntry.prototype.setPlatform = function (platform) {\n  this.platform = platform;\n};\n/**\r\n * Sets the size of the entry.\r\n *\r\n * @param size\r\n */\n\n\nZipArchiveEntry.prototype.setSize = function (size) {\n  if (size < 0) {\n    throw new Error('invalid entry size');\n  }\n\n  this.size = size;\n};\n/**\r\n * Sets the time of the entry.\r\n *\r\n * @param time\r\n * @param forceLocalTime\r\n */\n\n\nZipArchiveEntry.prototype.setTime = function (time, forceLocalTime) {\n  if (!(time instanceof Date)) {\n    throw new Error('invalid entry time');\n  }\n\n  this.time = zipUtil.dateToDos(time, forceLocalTime);\n};\n/**\r\n * Sets the UNIX file permissions for the entry.\r\n *\r\n * @param mode\r\n */\n\n\nZipArchiveEntry.prototype.setUnixMode = function (mode) {\n  mode |= this.isDirectory() ? constants.S_IFDIR : constants.S_IFREG;\n  var extattr = 0;\n  extattr |= mode << constants.SHORT_SHIFT | (this.isDirectory() ? constants.S_DOS_D : constants.S_DOS_A);\n  this.setExternalAttributes(extattr);\n  this.mode = mode & constants.MODE_MASK;\n  this.platform = constants.PLATFORM_UNIX;\n};\n/**\r\n * Sets the version of ZIP needed to extract this entry.\r\n *\r\n * @param minver\r\n */\n\n\nZipArchiveEntry.prototype.setVersionNeededToExtract = function (minver) {\n  this.minver = minver;\n};\n/**\r\n * Returns true if this entry represents a directory.\r\n *\r\n * @returns {boolean}\r\n */\n\n\nZipArchiveEntry.prototype.isDirectory = function () {\n  return this.getName().slice(-1) === '/';\n};\n/**\r\n * Returns true if this entry represents a unix symlink,\r\n * in which case the entry's content contains the target path\r\n * for the symlink.\r\n *\r\n * @returns {boolean}\r\n */\n\n\nZipArchiveEntry.prototype.isUnixSymlink = function () {\n  return (this.getUnixMode() & UnixStat.FILE_TYPE_FLAG) === UnixStat.LINK_FLAG;\n};\n/**\r\n * Returns true if this entry is using the ZIP64 extension of ZIP.\r\n *\r\n * @returns {boolean}\r\n */\n\n\nZipArchiveEntry.prototype.isZip64 = function () {\n  return this.csize > constants.ZIP64_MAGIC || this.size > constants.ZIP64_MAGIC;\n};","map":null,"metadata":{},"sourceType":"script"}