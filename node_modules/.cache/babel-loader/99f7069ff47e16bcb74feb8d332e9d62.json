{"ast":null,"code":"var Splicer = require('stream-splicer');\n\nvar inherits = require('inherits');\n\nvar isarray = require('isarray');\n\nmodule.exports = Labeled;\ninherits(Labeled, Splicer);\n\nmodule.exports.obj = function (streams, opts) {\n  if (!opts) opts = {};\n  opts.objectMode = true;\n  return new Labeled(streams, opts);\n};\n\nfunction Labeled(streams, opts) {\n  if (!(this instanceof Labeled)) return new Labeled(streams, opts);\n  Splicer.call(this, [], opts);\n  var reps = [];\n\n  for (var i = 0; i < streams.length; i++) {\n    var s = streams[i];\n    if (typeof s === 'string') continue;\n\n    if (isarray(s)) {\n      s = new Labeled(s, opts);\n    }\n\n    if (i >= 0 && typeof streams[i - 1] === 'string') {\n      s.label = streams[i - 1];\n    }\n\n    reps.push(s);\n  }\n\n  if (typeof streams[i - 1] === 'string') {\n    reps.push(new Labeled([], opts));\n  }\n\n  this.splice.apply(this, [0, 0].concat(reps));\n}\n\nLabeled.prototype.indexOf = function (stream) {\n  if (typeof stream === 'string') {\n    for (var i = 0; i < this._streams.length; i++) {\n      if (this._streams[i].label === stream) return i;\n    }\n\n    return -1;\n  } else {\n    return Splicer.prototype.indexOf.call(this, stream);\n  }\n};\n\nLabeled.prototype.get = function (key) {\n  if (typeof key === 'string') {\n    var ix = this.indexOf(key);\n    if (ix < 0) return undefined;\n    return this._streams[ix];\n  } else return Splicer.prototype.get.call(this, key);\n};\n\nLabeled.prototype.splice = function (key) {\n  var ix;\n\n  if (typeof key === 'string') {\n    ix = this.indexOf(key);\n  } else ix = key;\n\n  var args = [ix].concat([].slice.call(arguments, 1));\n  return Splicer.prototype.splice.apply(this, args);\n};","map":null,"metadata":{},"sourceType":"script"}