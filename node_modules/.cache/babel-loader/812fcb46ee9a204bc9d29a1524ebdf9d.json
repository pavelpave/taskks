{"ast":null,"code":"var assert = require('assert');\n/**\n * Get a list of all identifiers that are initialised by this (possibly destructuring)\n * node.\n *\n * eg with input:\n *\n * var { a: [b, ...c], d } = xyz\n *\n * this returns the nodes for 'b', 'c', and 'd'\n */\n\n\nmodule.exports = function getAssignedIdentifiers(node, identifiers) {\n  assert.equal(typeof node, 'object', 'get-assigned-identifiers: node must be object');\n  assert.equal(typeof node.type, 'string', 'get-assigned-identifiers: node must have a type');\n  identifiers = identifiers || [];\n\n  if (node.type === 'ImportDeclaration') {\n    node.specifiers.forEach(function (el) {\n      getAssignedIdentifiers(el, identifiers);\n    });\n  }\n\n  if (node.type === 'ImportDefaultSpecifier' || node.type === 'ImportNamespaceSpecifier' || node.type === 'ImportSpecifier') {\n    node = node.local;\n  }\n\n  if (node.type === 'RestElement') {\n    node = node.argument;\n  }\n\n  if (node.type === 'ArrayPattern') {\n    node.elements.forEach(function (el) {\n      // `el` might be `null` in case of `[x,,y] = whatever`\n      if (el) {\n        getAssignedIdentifiers(el, identifiers);\n      }\n    });\n  }\n\n  if (node.type === 'ObjectPattern') {\n    node.properties.forEach(function (prop) {\n      if (prop.type === 'Property') {\n        getAssignedIdentifiers(prop.value, identifiers);\n      } else if (prop.type === 'RestElement') {\n        getAssignedIdentifiers(prop, identifiers);\n      }\n    });\n  }\n\n  if (node.type === 'Identifier') {\n    identifiers.push(node);\n  }\n\n  return identifiers;\n};","map":null,"metadata":{},"sourceType":"script"}