{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\n\nvar sysPath = require('path');\n\nvar readdirp = require('readdirp');\n\nvar isBinaryPath = require('is-binary-path'); // fs.watch helpers\n// object to hold per-process fs.watch instances\n// (may be shared across chokidar FSWatcher instances)\n\n\nvar FsWatchInstances = Object.create(null); // Private function: Instantiates the fs.watch interface\n// * path       - string, path to be watched\n// * options    - object, options to be passed to fs.watch\n// * listener   - function, main event handler\n// * errHandler - function, handler which emits info about errors\n// * emitRaw    - function, handler which emits raw event data\n// Returns new fsevents instance\n\nfunction createFsWatchInstance(path, options, listener, errHandler, emitRaw) {\n  var handleEvent = function handleEvent(rawEvent, evPath) {\n    listener(path);\n    emitRaw(rawEvent, evPath, {\n      watchedPath: path\n    }); // emit based on events occuring for files from a directory's watcher in\n    // case the file's watcher misses it (and rely on throttling to de-dupe)\n\n    if (evPath && path !== evPath) {\n      fsWatchBroadcast(sysPath.resolve(path, evPath), 'listeners', sysPath.join(path, evPath));\n    }\n  };\n\n  try {\n    return fs.watch(path, options, handleEvent);\n  } catch (error) {\n    errHandler(error);\n  }\n} // Private function: Helper for passing fs.watch event data to a\n// collection of listeners\n// * fullPath   - string, absolute path bound to the fs.watch instance\n// * type       - string, listener type\n// * val[1..3]  - arguments to be passed to listeners\n// Returns nothing\n\n\nfunction fsWatchBroadcast(fullPath, type, val1, val2, val3) {\n  if (!FsWatchInstances[fullPath]) return;\n  FsWatchInstances[fullPath][type].forEach(function (listener) {\n    listener(val1, val2, val3);\n  });\n} // Private function: Instantiates the fs.watch interface or binds listeners\n// to an existing one covering the same file system entry\n// * path       - string, path to be watched\n// * fullPath   - string, absolute path\n// * options    - object, options to be passed to fs.watch\n// * handlers   - object, container for event listener functions\n// Returns close function\n\n\nfunction setFsWatchListener(path, fullPath, options, handlers) {\n  var listener = handlers.listener;\n  var errHandler = handlers.errHandler;\n  var rawEmitter = handlers.rawEmitter;\n  var container = FsWatchInstances[fullPath];\n  var watcher;\n\n  if (!options.persistent) {\n    watcher = createFsWatchInstance(path, options, listener, errHandler, rawEmitter);\n    return watcher.close.bind(watcher);\n  }\n\n  if (!container) {\n    watcher = createFsWatchInstance(path, options, fsWatchBroadcast.bind(null, fullPath, 'listeners'), errHandler, // no need to use broadcast here\n    fsWatchBroadcast.bind(null, fullPath, 'rawEmitters'));\n    if (!watcher) return;\n    var broadcastErr = fsWatchBroadcast.bind(null, fullPath, 'errHandlers');\n    watcher.on('error', function (error) {\n      // Workaround for https://github.com/joyent/node/issues/4337\n      if (process.platform === 'win32' && error.code === 'EPERM') {\n        fs.open(path, 'r', function (err, fd) {\n          if (fd) fs.close(fd);\n          if (!err) broadcastErr(error);\n        });\n      } else {\n        broadcastErr(error);\n      }\n    });\n    container = FsWatchInstances[fullPath] = {\n      listeners: [listener],\n      errHandlers: [errHandler],\n      rawEmitters: [rawEmitter],\n      watcher: watcher\n    };\n  } else {\n    container.listeners.push(listener);\n    container.errHandlers.push(errHandler);\n    container.rawEmitters.push(rawEmitter);\n  }\n\n  var listenerIndex = container.listeners.length - 1; // removes this instance's listeners and closes the underlying fs.watch\n  // instance if there are no more listeners left\n\n  return function close() {\n    delete container.listeners[listenerIndex];\n    delete container.errHandlers[listenerIndex];\n    delete container.rawEmitters[listenerIndex];\n\n    if (!Object.keys(container.listeners).length) {\n      container.watcher.close();\n      delete FsWatchInstances[fullPath];\n    }\n  };\n} // fs.watchFile helpers\n// object to hold per-process fs.watchFile instances\n// (may be shared across chokidar FSWatcher instances)\n\n\nvar FsWatchFileInstances = Object.create(null); // Private function: Instantiates the fs.watchFile interface or binds listeners\n// to an existing one covering the same file system entry\n// * path       - string, path to be watched\n// * fullPath   - string, absolute path\n// * options    - object, options to be passed to fs.watchFile\n// * handlers   - object, container for event listener functions\n// Returns close function\n\nfunction setFsWatchFileListener(path, fullPath, options, handlers) {\n  var listener = handlers.listener;\n  var rawEmitter = handlers.rawEmitter;\n  var container = FsWatchFileInstances[fullPath];\n  var listeners = [];\n  var rawEmitters = [];\n\n  if (container && (container.options.persistent < options.persistent || container.options.interval > options.interval)) {\n    // \"Upgrade\" the watcher to persistence or a quicker interval.\n    // This creates some unlikely edge case issues if the user mixes\n    // settings in a very weird way, but solving for those cases\n    // doesn't seem worthwhile for the added complexity.\n    listeners = container.listeners;\n    rawEmitters = container.rawEmitters;\n    fs.unwatchFile(fullPath);\n    container = false;\n  }\n\n  if (!container) {\n    listeners.push(listener);\n    rawEmitters.push(rawEmitter);\n    container = FsWatchFileInstances[fullPath] = {\n      listeners: listeners,\n      rawEmitters: rawEmitters,\n      options: options,\n      watcher: fs.watchFile(fullPath, options, function (curr, prev) {\n        container.rawEmitters.forEach(function (rawEmitter) {\n          rawEmitter('change', fullPath, {\n            curr: curr,\n            prev: prev\n          });\n        });\n        var currmtime = curr.mtime.getTime();\n\n        if (curr.size !== prev.size || currmtime > prev.mtime.getTime() || currmtime === 0) {\n          container.listeners.forEach(function (listener) {\n            listener(path, curr);\n          });\n        }\n      })\n    };\n  } else {\n    container.listeners.push(listener);\n    container.rawEmitters.push(rawEmitter);\n  }\n\n  var listenerIndex = container.listeners.length - 1; // removes this instance's listeners and closes the underlying fs.watchFile\n  // instance if there are no more listeners left\n\n  return function close() {\n    delete container.listeners[listenerIndex];\n    delete container.rawEmitters[listenerIndex];\n\n    if (!Object.keys(container.listeners).length) {\n      fs.unwatchFile(fullPath);\n      delete FsWatchFileInstances[fullPath];\n    }\n  };\n} // fake constructor for attaching nodefs-specific prototype methods that\n// will be copied to FSWatcher's prototype\n\n\nfunction NodeFsHandler() {} // Private method: Watch file for changes with fs.watchFile or fs.watch.\n// * path     - string, path to file or directory.\n// * listener - function, to be executed on fs change.\n// Returns close function for the watcher instance\n\n\nNodeFsHandler.prototype._watchWithNodeFs = function (path, listener) {\n  var directory = sysPath.dirname(path);\n  var basename = sysPath.basename(path);\n\n  var parent = this._getWatchedDir(directory);\n\n  parent.add(basename);\n  var absolutePath = sysPath.resolve(path);\n  var options = {\n    persistent: this.options.persistent\n  };\n  if (!listener) listener = Function.prototype; // empty function\n\n  var closer;\n\n  if (this.options.usePolling) {\n    options.interval = this.enableBinaryInterval && isBinaryPath(basename) ? this.options.binaryInterval : this.options.interval;\n    closer = setFsWatchFileListener(path, absolutePath, options, {\n      listener: listener,\n      rawEmitter: this.emit.bind(this, 'raw')\n    });\n  } else {\n    closer = setFsWatchListener(path, absolutePath, options, {\n      listener: listener,\n      errHandler: this._handleError.bind(this),\n      rawEmitter: this.emit.bind(this, 'raw')\n    });\n  }\n\n  return closer;\n}; // Private method: Watch a file and emit add event if warranted\n// * file       - string, the file's path\n// * stats      - object, result of fs.stat\n// * initialAdd - boolean, was the file added at watch instantiation?\n// * callback   - function, called when done processing as a newly seen file\n// Returns close function for the watcher instance\n\n\nNodeFsHandler.prototype._handleFile = function (file, stats, initialAdd, callback) {\n  var dirname = sysPath.dirname(file);\n  var basename = sysPath.basename(file);\n\n  var parent = this._getWatchedDir(dirname); // if the file is already being watched, do nothing\n\n\n  if (parent.has(basename)) return callback(); // kick off the watcher\n\n  var closer = this._watchWithNodeFs(file, function (path, newStats) {\n    if (!this._throttle('watch', file, 5)) return;\n\n    if (!newStats || newStats && newStats.mtime.getTime() === 0) {\n      fs.stat(file, function (error, newStats) {\n        // Fix issues where mtime is null but file is still present\n        if (error) {\n          this._remove(dirname, basename);\n        } else {\n          this._emit('change', file, newStats);\n        }\n      }.bind(this)); // add is about to be emitted if file not already tracked in parent\n    } else if (parent.has(basename)) {\n      this._emit('change', file, newStats);\n    }\n  }.bind(this)); // emit an add event if we're supposed to\n\n\n  if (!(initialAdd && this.options.ignoreInitial)) {\n    if (!this._throttle('add', file, 0)) return;\n\n    this._emit('add', file, stats);\n  }\n\n  if (callback) callback();\n  return closer;\n}; // Private method: Handle symlinks encountered while reading a dir\n// * entry      - object, entry object returned by readdirp\n// * directory  - string, path of the directory being read\n// * path       - string, path of this item\n// * item       - string, basename of this item\n// Returns true if no more processing is needed for this entry.\n\n\nNodeFsHandler.prototype._handleSymlink = function (entry, directory, path, item) {\n  var full = entry.fullPath;\n\n  var dir = this._getWatchedDir(directory);\n\n  if (!this.options.followSymlinks) {\n    // watch symlink directly (don't follow) and detect changes\n    this._readyCount++;\n    fs.realpath(path, function (error, linkPath) {\n      if (dir.has(item)) {\n        if (this._symlinkPaths[full] !== linkPath) {\n          this._symlinkPaths[full] = linkPath;\n\n          this._emit('change', path, entry.stat);\n        }\n      } else {\n        dir.add(item);\n        this._symlinkPaths[full] = linkPath;\n\n        this._emit('add', path, entry.stat);\n      }\n\n      this._emitReady();\n    }.bind(this));\n    return true;\n  } // don't follow the same symlink more than once\n\n\n  if (this._symlinkPaths[full]) return true;else this._symlinkPaths[full] = true;\n}; // Private method: Read directory to add / remove files from `@watched` list\n// and re-read it on change.\n// * dir        - string, fs path.\n// * stats      - object, result of fs.stat\n// * initialAdd - boolean, was the file added at watch instantiation?\n// * depth      - int, depth relative to user-supplied path\n// * target     - string, child path actually targeted for watch\n// * wh         - object, common watch helpers for this path\n// * callback   - function, called when dir scan is complete\n// Returns close function for the watcher instance\n\n\nNodeFsHandler.prototype._handleDir = function (dir, stats, initialAdd, depth, target, wh, callback) {\n  var parentDir = this._getWatchedDir(sysPath.dirname(dir));\n\n  var tracked = parentDir.has(sysPath.basename(dir));\n\n  if (!(initialAdd && this.options.ignoreInitial) && !target && !tracked) {\n    if (!wh.hasGlob || wh.globFilter(dir)) this._emit('addDir', dir, stats);\n  } // ensure dir is tracked (harmless if redundant)\n\n\n  parentDir.add(sysPath.basename(dir));\n\n  this._getWatchedDir(dir);\n\n  var read = function (directory, initialAdd, done) {\n    // Normalize the directory name on Windows\n    directory = sysPath.join(directory, '');\n\n    if (!wh.hasGlob) {\n      var throttler = this._throttle('readdir', directory, 1000);\n\n      if (!throttler) return;\n    }\n\n    var previous = this._getWatchedDir(wh.path);\n\n    var current = [];\n    readdirp({\n      root: directory,\n      entryType: 'all',\n      fileFilter: wh.filterPath,\n      directoryFilter: wh.filterDir,\n      depth: 0,\n      lstat: true\n    }).on('data', function (entry) {\n      var item = entry.path;\n      var path = sysPath.join(directory, item);\n      current.push(item);\n      if (entry.stat.isSymbolicLink() && this._handleSymlink(entry, directory, path, item)) return; // Files that present in current directory snapshot\n      // but absent in previous are added to watch list and\n      // emit `add` event.\n\n      if (item === target || !target && !previous.has(item)) {\n        this._readyCount++; // ensure relativeness of path is preserved in case of watcher reuse\n\n        path = sysPath.join(dir, sysPath.relative(dir, path));\n\n        this._addToNodeFs(path, initialAdd, wh, depth + 1);\n      }\n    }.bind(this)).on('end', function () {\n      if (throttler) throttler.clear();\n      if (done) done(); // Files that absent in current directory snapshot\n      // but present in previous emit `remove` event\n      // and are removed from @watched[directory].\n\n      previous.children().filter(function (item) {\n        return item !== directory && current.indexOf(item) === -1 && ( // in case of intersecting globs;\n        // a path may have been filtered out of this readdir, but\n        // shouldn't be removed because it matches a different glob\n        !wh.hasGlob || wh.filterPath({\n          fullPath: sysPath.resolve(directory, item)\n        }));\n      }).forEach(function (item) {\n        this._remove(directory, item);\n      }, this);\n    }.bind(this)).on('error', this._handleError.bind(this));\n  }.bind(this);\n\n  var closer;\n\n  if (this.options.depth == null || depth <= this.options.depth) {\n    if (!target) read(dir, initialAdd, callback);\n    closer = this._watchWithNodeFs(dir, function (dirPath, stats) {\n      // if current directory is removed, do nothing\n      if (stats && stats.mtime.getTime() === 0) return;\n      read(dirPath, false);\n    });\n  } else {\n    callback();\n  }\n\n  return closer;\n}; // Private method: Handle added file, directory, or glob pattern.\n// Delegates call to _handleFile / _handleDir after checks.\n// * path       - string, path to file or directory.\n// * initialAdd - boolean, was the file added at watch instantiation?\n// * depth      - int, depth relative to user-supplied path\n// * target     - string, child path actually targeted for watch\n// * callback   - function, indicates whether the path was found or not\n// Returns nothing\n\n\nNodeFsHandler.prototype._addToNodeFs = function (path, initialAdd, priorWh, depth, target, callback) {\n  if (!callback) callback = Function.prototype;\n  var ready = this._emitReady;\n\n  if (this._isIgnored(path) || this.closed) {\n    ready();\n    return callback(null, false);\n  }\n\n  var wh = this._getWatchHelpers(path, depth);\n\n  if (!wh.hasGlob && priorWh) {\n    wh.hasGlob = priorWh.hasGlob;\n    wh.globFilter = priorWh.globFilter;\n    wh.filterPath = priorWh.filterPath;\n    wh.filterDir = priorWh.filterDir;\n  } // evaluate what is at the path we're being asked to watch\n\n\n  fs[wh.statMethod](wh.watchPath, function (error, stats) {\n    if (this._handleError(error)) return callback(null, path);\n\n    if (this._isIgnored(wh.watchPath, stats)) {\n      ready();\n      return callback(null, false);\n    }\n\n    var initDir = function (dir, target) {\n      return this._handleDir(dir, stats, initialAdd, depth, target, wh, ready);\n    }.bind(this);\n\n    var closer;\n\n    if (stats.isDirectory()) {\n      closer = initDir(wh.watchPath, target);\n    } else if (stats.isSymbolicLink()) {\n      var parent = sysPath.dirname(wh.watchPath);\n\n      this._getWatchedDir(parent).add(wh.watchPath);\n\n      this._emit('add', wh.watchPath, stats);\n\n      closer = initDir(parent, path); // preserve this symlink's target path\n\n      fs.realpath(path, function (error, targetPath) {\n        this._symlinkPaths[sysPath.resolve(path)] = targetPath;\n        ready();\n      }.bind(this));\n    } else {\n      closer = this._handleFile(wh.watchPath, stats, initialAdd, ready);\n    }\n\n    if (closer) this._closers[path] = closer;\n    callback(null, false);\n  }.bind(this));\n};\n\nmodule.exports = NodeFsHandler;","map":null,"metadata":{},"sourceType":"script"}