{"ast":null,"code":"/*!\n * extglob <https://github.com/jonschlinkert/extglob>\n *\n * Copyright (c) 2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n'use strict';\n/**\n * Module dependencies\n */\n\nvar isExtglob = require('is-extglob');\n\nvar re,\n    cache = {};\n/**\n * Expose `extglob`\n */\n\nmodule.exports = extglob;\n/**\n * Convert the given extglob `string` to a regex-compatible\n * string.\n *\n * ```js\n * var extglob = require('extglob');\n * extglob('!(a?(b))');\n * //=> '(?!a(?:b)?)[^/]*?'\n * ```\n *\n * @param {String} `str` The string to convert.\n * @param {Object} `options`\n *   @option {Boolean} [options] `esc` If `false` special characters will not be escaped. Defaults to `true`.\n *   @option {Boolean} [options] `regex` If `true` a regular expression is returned instead of a string.\n * @return {String}\n * @api public\n */\n\nfunction extglob(str, opts) {\n  opts = opts || {};\n  var o = {},\n      i = 0; // fix common character reversals\n  // '*!(.js)' => '*.!(js)'\n\n  str = str.replace(/!\\(([^\\w*()])/g, '$1!('); // support file extension negation\n\n  str = str.replace(/([*\\/])\\.!\\([*]\\)/g, function (m, ch) {\n    if (ch === '/') {\n      return escape('\\\\/[^.]+');\n    }\n\n    return escape('[^.]+');\n  }); // create a unique key for caching by\n  // combining the string and options\n\n  var key = str + String(!!opts.regex) + String(!!opts.contains) + String(!!opts.escape);\n\n  if (cache.hasOwnProperty(key)) {\n    return cache[key];\n  }\n\n  if (!(re instanceof RegExp)) {\n    re = regex();\n  }\n\n  opts.negate = false;\n  var m;\n\n  while (m = re.exec(str)) {\n    var prefix = m[1];\n    var inner = m[3];\n\n    if (prefix === '!') {\n      opts.negate = true;\n    }\n\n    var id = '__EXTGLOB_' + i++ + '__'; // use the prefix of the _last_ (outtermost) pattern\n\n    o[id] = wrap(inner, prefix, opts.escape);\n    str = str.split(m[0]).join(id);\n  }\n\n  var keys = Object.keys(o);\n  var len = keys.length; // we have to loop again to allow us to convert\n  // patterns in reverse order (starting with the\n  // innermost/last pattern first)\n\n  while (len--) {\n    var prop = keys[len];\n    str = str.split(prop).join(o[prop]);\n  }\n\n  var result = opts.regex ? toRegex(str, opts.contains, opts.negate) : str;\n  result = result.split('.').join('\\\\.'); // cache the result and return it\n\n  return cache[key] = result;\n}\n/**\n * Convert `string` to a regex string.\n *\n * @param  {String} `str`\n * @param  {String} `prefix` Character that determines how to wrap the string.\n * @param  {Boolean} `esc` If `false` special characters will not be escaped. Defaults to `true`.\n * @return {String}\n */\n\n\nfunction wrap(inner, prefix, esc) {\n  if (esc) inner = escape(inner);\n\n  switch (prefix) {\n    case '!':\n      return '(?!' + inner + ')[^/]' + (esc ? '%%%~' : '*?');\n\n    case '@':\n      return '(?:' + inner + ')';\n\n    case '+':\n      return '(?:' + inner + ')+';\n\n    case '*':\n      return '(?:' + inner + ')' + (esc ? '%%' : '*');\n\n    case '?':\n      return '(?:' + inner + '|)';\n\n    default:\n      return inner;\n  }\n}\n\nfunction escape(str) {\n  str = str.split('*').join('[^/]%%%~');\n  str = str.split('.').join('\\\\.');\n  return str;\n}\n/**\n * extglob regex.\n */\n\n\nfunction regex() {\n  return /(\\\\?[@?!+*$]\\\\?)(\\(([^()]*?)\\))/;\n}\n/**\n * Negation regex\n */\n\n\nfunction negate(str) {\n  return '(?!^' + str + ').*$';\n}\n/**\n * Create the regex to do the matching. If\n * the leading character in the `pattern` is `!`\n * a negation regex is returned.\n *\n * @param {String} `pattern`\n * @param {Boolean} `contains` Allow loose matching.\n * @param {Boolean} `isNegated` True if the pattern is a negation pattern.\n */\n\n\nfunction toRegex(pattern, contains, isNegated) {\n  var prefix = contains ? '^' : '';\n  var after = contains ? '$' : '';\n  pattern = '(?:' + pattern + ')' + after;\n\n  if (isNegated) {\n    pattern = prefix + negate(pattern);\n  }\n\n  return new RegExp(prefix + pattern);\n}","map":null,"metadata":{},"sourceType":"script"}