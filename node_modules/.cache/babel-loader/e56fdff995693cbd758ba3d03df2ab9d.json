{"ast":null,"code":"var JSONStream = require('JSONStream');\n\nvar defined = require('defined');\n\nvar through = require('through2');\n\nvar umd = require('umd');\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar combineSourceMap = require('combine-source-map');\n\nvar defaultPreludePath = path.join(__dirname, '_prelude.js');\nvar defaultPrelude = fs.readFileSync(defaultPreludePath, 'utf8');\n\nfunction newlinesIn(src) {\n  if (!src) return 0;\n  var newlines = src.match(/\\n/g);\n  return newlines ? newlines.length : 0;\n}\n\nmodule.exports = function (opts) {\n  if (!opts) opts = {};\n  var parser = opts.raw ? through.obj() : JSONStream.parse([true]);\n  var stream = through.obj(function (buf, enc, next) {\n    parser.write(buf);\n    next();\n  }, function () {\n    parser.end();\n  });\n  parser.pipe(through.obj(write, end));\n  stream.standaloneModule = opts.standaloneModule;\n  stream.hasExports = opts.hasExports;\n  var first = true;\n  var entries = [];\n  var basedir = defined(opts.basedir, process.cwd());\n  var prelude = opts.prelude || defaultPrelude;\n  var preludePath = opts.preludePath || path.relative(basedir, defaultPreludePath).replace(/\\\\/g, '/');\n  var lineno = 1 + newlinesIn(prelude);\n  var sourcemap;\n  return stream;\n\n  function write(row, enc, next) {\n    if (first && opts.standalone) {\n      var pre = umd.prelude(opts.standalone).trim();\n      stream.push(Buffer.from(pre + 'return ', 'utf8'));\n    } else if (first && stream.hasExports) {\n      var pre = opts.externalRequireName || 'require';\n      stream.push(Buffer.from(pre + '=', 'utf8'));\n    }\n\n    if (first) stream.push(Buffer.from(prelude + '({', 'utf8'));\n\n    if (row.sourceFile && !row.nomap) {\n      if (!sourcemap) {\n        sourcemap = combineSourceMap.create(null, opts.sourceRoot);\n        sourcemap.addFile({\n          sourceFile: preludePath,\n          source: prelude\n        }, {\n          line: 0\n        });\n      }\n\n      sourcemap.addFile({\n        sourceFile: row.sourceFile,\n        source: row.source\n      }, {\n        line: lineno\n      });\n    }\n\n    var wrappedSource = [first ? '' : ',', JSON.stringify(row.id), ':[', 'function(require,module,exports){\\n', combineSourceMap.removeComments(row.source), '\\n},', '{' + Object.keys(row.deps || {}).sort().map(function (key) {\n      return JSON.stringify(key) + ':' + JSON.stringify(row.deps[key]);\n    }).join(',') + '}', ']'].join('');\n    stream.push(Buffer.from(wrappedSource, 'utf8'));\n    lineno += newlinesIn(wrappedSource);\n    first = false;\n\n    if (row.entry && row.order !== undefined) {\n      entries[row.order] = row.id;\n    } else if (row.entry) entries.push(row.id);\n\n    next();\n  }\n\n  function end() {\n    if (first) stream.push(Buffer.from(prelude + '({', 'utf8'));\n    entries = entries.filter(function (x) {\n      return x !== undefined;\n    });\n    stream.push(Buffer.from('},{},' + JSON.stringify(entries) + ')', 'utf8'));\n\n    if (opts.standalone && !first) {\n      stream.push(Buffer.from('(' + JSON.stringify(stream.standaloneModule) + ')' + umd.postlude(opts.standalone), 'utf8'));\n    }\n\n    if (sourcemap) {\n      var comment = sourcemap.comment();\n\n      if (opts.sourceMapPrefix) {\n        comment = comment.replace(/^\\/\\/#/, function () {\n          return opts.sourceMapPrefix;\n        });\n      }\n\n      stream.push(Buffer.from('\\n' + comment + '\\n', 'utf8'));\n    }\n\n    if (!sourcemap && !opts.standalone) {\n      stream.push(Buffer.from(';\\n', 'utf8'));\n    }\n\n    stream.push(null);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}