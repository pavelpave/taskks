{"ast":null,"code":"var through = require('through2');\n\nvar shasum = require('shasum');\n\nmodule.exports = function (opts) {\n  if (!opts) opts = {};\n  var rows = [];\n  return through.obj(write, end);\n\n  function write(row, enc, next) {\n    rows.push(row);\n    next();\n  }\n\n  function end() {\n    var tr = this;\n    rows.sort(cmp);\n    sorter(rows, tr, opts);\n  }\n};\n\nfunction sorter(rows, tr, opts) {\n  var expose = opts.expose || {};\n\n  if (Array.isArray(expose)) {\n    expose = expose.reduce(function (acc, key) {\n      acc[key] = true;\n      return acc;\n    }, {});\n  }\n\n  var hashes = {},\n      deduped = {};\n  var sameDeps = depCmp();\n\n  if (opts.dedupe) {\n    rows.forEach(function (row) {\n      var h = shasum(row.source);\n      sameDeps.add(row, h);\n\n      if (hashes[h]) {\n        hashes[h].push(row);\n      } else {\n        hashes[h] = [row];\n      }\n    });\n    Object.keys(hashes).forEach(function (h) {\n      var rows = hashes[h];\n\n      while (rows.length > 1) {\n        var row = rows.pop();\n        row.dedupe = rows[0].id;\n        row.sameDeps = sameDeps.cmp(rows[0].deps, row.deps);\n        deduped[row.id] = rows[0].id;\n      }\n    });\n  }\n\n  if (opts.index) {\n    var index = {};\n    var offset = 0;\n    rows.forEach(function (row, ix) {\n      if (has(expose, row.id)) {\n        row.index = row.id;\n        offset++;\n\n        if (expose[row.id] !== true) {\n          index[expose[row.id]] = row.index;\n        }\n      } else {\n        row.index = ix + 1 - offset;\n      }\n\n      index[row.id] = row.index;\n    });\n    rows.forEach(function (row) {\n      row.indexDeps = {};\n      Object.keys(row.deps).forEach(function (key) {\n        var id = row.deps[key];\n        row.indexDeps[key] = index[id];\n      });\n\n      if (row.dedupe) {\n        row.dedupeIndex = index[row.dedupe];\n      }\n\n      tr.push(row);\n    });\n  } else {\n    rows.forEach(function (row) {\n      tr.push(row);\n    });\n  }\n\n  tr.push(null);\n}\n\nfunction cmp(a, b) {\n  return a.id + a.hash < b.id + b.hash ? -1 : 1;\n}\n\nfunction has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nfunction depCmp() {\n  var deps = {},\n      hashes = {};\n  return {\n    add: add,\n    cmp: cmp\n  };\n\n  function add(row, hash) {\n    deps[row.id] = row.deps;\n    hashes[row.id] = hash;\n  }\n\n  function cmp(a, b, limit) {\n    if (!a && !b) return true;\n    if (!a || !b) return false;\n    var keys = Object.keys(a);\n    if (keys.length !== Object.keys(b).length) return false;\n\n    for (var i = 0; i < keys.length; i++) {\n      var k = keys[i],\n          ka = a[k],\n          kb = b[k];\n      var ha = hashes[ka];\n      var hb = hashes[kb];\n      var da = deps[ka];\n      var db = deps[kb];\n      if (ka === kb) continue;\n\n      if (ha !== hb || !limit && !cmp(da, db, 1)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}