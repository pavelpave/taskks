{"ast":null,"code":"//Element object\n//Wrapper around browser methods\nvar _ = require(\"lodash\"),\n    utils = require(\"./utils.js\"),\n    deprecator = utils.deprecator,\n    fs = require(\"fs\"),\n    callbacks = require(\"./callbacks\"),\n    elementCallback = callbacks.elementCallback,\n    elementsCallback = callbacks.elementsCallback,\n    commands = require('./commands');\n\nvar elementCommands = {};\n/**\n * element.type(keys, cb) -> cb(err)\n *\n * @jsonWire POST /session/:sessionId/element/:id/value\n */\n\nelementCommands.type = function (keys, cb) {\n  commands.type.apply(this.browser, [this, keys, cb]);\n};\n/**\n * element.keys(keys, cb) -> cb(err)\n *\n * @jsonWire POST /session/:sessionId/element/:id/value\n */\n\n\nelementCommands.keys = function (keys, cb) {\n  commands.keys.apply(this.browser, [keys, cb]);\n};\n\nfunction _isLocalFile(path, cb) {\n  fs.exists(path, function (exists) {\n    if (exists) {\n      fs.lstat(path, function (err, stats) {\n        cb(err, stats.isFile());\n      });\n    } else {\n      cb(null, false);\n    }\n  });\n}\n/**\n * Equivalent to the python sendKeys binding. Upload file if\n * a local file is detected, otherwise behaves like type.\n * element.sendKeys(keys, cb) -> cb(err)\n */\n\n\nelementCommands.sendKeys = function (keys, cb) {\n  var _this = this;\n\n  if (!Array.isArray(keys)) {\n    keys = [keys];\n  } // ensure all keystrokes are strings to conform to JSONWP\n\n\n  _.each(keys, function (key, idx) {\n    if (typeof key !== \"string\") {\n      keys[idx] = key.toString();\n    }\n  });\n\n  var path = keys.join('');\n\n  _isLocalFile(path, function (err, isLocalFile) {\n    if (err) {\n      return cb(err);\n    }\n\n    if (isLocalFile) {\n      commands.uploadFile.apply(_this.browser, [path, function (err, distantFilePath) {\n        if (err) {\n          return cb(err);\n        }\n\n        return commands.type.apply(_this.browser, [_this, distantFilePath, cb]);\n      }]);\n    } else {\n      commands.type.apply(_this.browser, [_this, keys, cb]);\n    }\n  });\n};\n/**\n * Equivalent to the python sendKeys binding, but replaces texts instead of keeping original. Upload file if\n * a local file is detected, otherwise behaves like type.\n * element.setText(keys, cb) -> cb(err)\n */\n\n\nelementCommands.setText = function (keys, cb) {\n  var _this = this;\n\n  if (!Array.isArray(keys)) {\n    keys = [keys];\n  } // ensure all keystrokes are strings to conform to JSONWP\n\n\n  _.each(keys, function (key, idx) {\n    if (typeof key !== \"string\") {\n      keys[idx] = key.toString();\n    }\n  });\n\n  commands.replace.apply(_this.browser, [_this, keys, cb]);\n};\n\nelementCommands.replaceKeys = function (keys, cb) {\n  deprecator.warn('element.replaceKeys', 'element.replaceKeys has been deprecated, use element.setText instead.');\n  elementCommands.setText.call(this, keys, cb);\n};\n/**\n * element.click(cb) -> cb(err)\n *\n * @jsonWire POST /session/:sessionId/element/:id/click\n */\n\n\nelementCommands.click = function (cb) {\n  commands.clickElement.apply(this.browser, [this, cb]);\n};\n/**\n * element.tap(cb) -> cb(err)\n *\n * @jsonWire POST /session/:sessionId/touch/click\n */\n\n\nelementCommands.tap = function (cb) {\n  commands.tapElement.apply(this.browser, [this, cb]);\n};\n/**\n * element.doubleClick(cb) -> cb(err)\n *\n * @jsonWire POST /session/:sessionId/doubleclick\n */\n\n\nelementCommands.doubleclick = function (cb) {\n  return commands.moveTo.apply(this.browser, [this, function (err) {\n    if (err) {\n      return cb(err);\n    }\n\n    commands.doubleclick.apply(this.browser, [cb]);\n  }.bind(this)]);\n};\n\nelementCommands.doubleClick = elementCommands.doubleclick;\n/**\n * element.moveTo(xoffset, yoffset, cb) -> cb(err)\n * xoffset and y offset are optional.\n *\n * @jsonWire POST /session/:sessionId/moveto\n */\n\nelementCommands.moveTo = function () {\n  var fargs = utils.varargs(arguments);\n  var cb = fargs.callback,\n      xoffset = fargs.all[0],\n      yoffset = fargs.all[1];\n  commands.moveTo.apply(this.browser, [this, xoffset, yoffset, cb]);\n};\n/**\n * element.flick(xoffset, yoffset, speed, cb) -> cb(err)\n *\n * @jsonWire POST /session/:sessionId/touch/flick\n */\n\n\nelementCommands.flick = function (xoffset, yoffset, speed, cb) {\n  commands.flick.apply(this.browser, [this.value, xoffset, yoffset, speed, cb]);\n};\n/**\n * element.text(cb) -> cb(err, text)\n *\n * @jsonWire GET /session/:sessionId/element/:id/text\n * @docOrder 2\n */\n\n\nelementCommands.text = function (cb) {\n  commands.text.apply(this.browser, [this, cb]);\n};\n/**\n * element.textPresent(searchText, cb) -> cb(err, boolean)\n *\n * @jsonWire GET /session/:sessionId/element/:id/text\n * @docOrder 4\n */\n\n\nelementCommands.textPresent = function (searchText, cb) {\n  commands.textPresent.apply(this.browser, [searchText, this, cb]);\n};\n/**\n * element.getAttribute(attrName, cb) -> cb(err, value)\n *\n * @jsonWire GET /session/:sessionId/element/:id/attribute/:name\n * @docOrder 2\n */\n\n\nelementCommands.getAttribute = function (name, cb) {\n  commands.getAttribute.apply(this.browser, [this, name, cb]);\n};\n/**\n * element.getTagName(cb) -> cb(err, name)\n *\n * @jsonWire GET /session/:sessionId/element/:id/name\n */\n\n\nelementCommands.getTagName = function (cb) {\n  commands.getTagName.apply(this.browser, [this, cb]);\n};\n/**\n * element.isDisplayed(cb) -> cb(err, displayed)\n *\n * @jsonWire GET /session/:sessionId/element/:id/displayed\n */\n\n\nelementCommands.isDisplayed = function (cb) {\n  commands.isDisplayed.apply(this.browser, [this, cb]);\n};\n\nelementCommands.displayed = elementCommands.isDisplayed;\n/**\n * element.isSelected(cb) -> cb(err, selected)\n *\n * @jsonWire GET /session/:sessionId/element/:id/selected\n */\n\nelementCommands.isSelected = function (cb) {\n  commands.isSelected.apply(this.browser, [this, cb]);\n};\n\nelementCommands.selected = elementCommands.isSelected;\n/**\n  * element.isEnabled(cb) -> cb(err, enabled)\n  *\n  * @jsonWire GET /session/:sessionId/element/:id/enabled\n  */\n\nelementCommands.isEnabled = function (cb) {\n  commands.isEnabled.apply(this.browser, [this, cb]);\n};\n\nelementCommands.enabled = elementCommands.isEnabled;\n/**\n * isVisible(cb) -> cb(err, boolean)\n */\n\nelementCommands.isVisible = function (cb) {\n  deprecator.warn('element.isVisible', 'element.isVisible has been deprecated, use element.isDisplayed instead.');\n  commands.isVisible.apply(this.browser, [this, cb]);\n};\n/**\n * element.getLocation(cb) -> cb(err, location)\n *\n * @jsonWire GET /session/:sessionId/element/:id/location\n */\n\n\nelementCommands.getLocation = function (cb) {\n  commands.getLocation.apply(this.browser, [this, cb]);\n};\n/**\n * element.getLocationInView(cb) -> cb(err, location)\n *\n * @jsonWire GET /session/:sessionId/element/:id/location\n */\n\n\nelementCommands.getLocationInView = function (cb) {\n  commands.getLocationInView.apply(this.browser, [this, cb]);\n};\n/**\n * element.getSize(cb) -> cb(err, size)\n *\n * @jsonWire GET /session/:sessionId/element/:id/size\n */\n\n\nelementCommands.getSize = function (cb) {\n  commands.getSize.apply(this.browser, [this, cb]);\n};\n/**\n * element.getValue(cb) -> cb(err, value)\n *\n * @jsonWire GET /session/:sessionId/element/:id/attribute/:name\n * @docOrder 4\n */\n\n\nelementCommands.getValue = function (cb) {\n  commands.getValue.apply(this.browser, [this, cb]);\n};\n/**\n * element.getComputedCss(cssProperty , cb) -> cb(err, value)\n *\n * @jsonWire GET /session/:sessionId/element/:id/css/:propertyName\n */\n\n\nelementCommands.getComputedCss = function (styleName, cb) {\n  commands.getComputedCss.apply(this.browser, [this, styleName, cb]);\n};\n\nelementCommands.getComputedCSS = elementCommands.getComputedCss;\n/**\n * element.clear(cb) -> cb(err)\n *\n * @jsonWire POST /session/:sessionId/element/:id/clear\n */\n\nelementCommands.clear = function (cb) {\n  commands.clear.apply(this.browser, [this, cb]);\n};\n/**\n * element.submit(cb) -> cb(err)\n *\n * @jsonWire POST /session/:sessionId/element/:id/submit\n */\n\n\nelementCommands.submit = function (cb) {\n  commands.submit.apply(this.browser, [this, cb]);\n};\n\n_.each(utils.elementFuncTypes, function (type) {\n  /**\n   * element.elementByClassName(value, cb) -> cb(err, element)\n   * element.elementByCssSelector(value, cb) -> cb(err, element)\n   * element.elementById(value, cb) -> cb(err, element)\n   * element.elementByName(value, cb) -> cb(err, element)\n   * element.elementByLinkText(value, cb) -> cb(err, element)\n   * element.elementByPartialLinkText(value, cb) -> cb(err, element)\n   * element.elementByTagName(value, cb) -> cb(err, element)\n   * element.elementByXPath(value, cb) -> cb(err, element)\n   * element.elementByCss(value, cb) -> cb(err, element)\n   * element.elementByIosUIAutomation(value, cb) -> cb(err, element)\n   * element.elementByIosClassChain(value, cb) -> cb(err, element)\n   * element.elementByIosPredicateString(value, cb) -> cb(err, element)\n   * element.elementByAndroidUIAutomator(value, cb) -> cb(err, element)\n   * element.elementByAccessibilityId(value, cb) -> cb(err, element)\n   *\n   * @jsonWire POST /session/:sessionId/element/:id/element\n   * @docOrder 2\n   */\n  elementCommands['element' + utils.elFuncSuffix(type)] = function (value, cb) {\n    elementCommands.element.apply(this, [utils.elFuncFullType(type), value, cb]);\n  };\n  /**\n   * element.elementsByClassName(value, cb) -> cb(err, elements)\n   * element.elementsByCssSelector(value, cb) -> cb(err, elements)\n   * element.elementsById(value, cb) -> cb(err, elements)\n   * element.elementsByName(value, cb) -> cb(err, elements)\n   * element.elementsByLinkText(value, cb) -> cb(err, elements)\n   * element.elementsByPartialLinkText(value, cb) -> cb(err, elements)\n   * element.elementsByTagName(value, cb) -> cb(err, elements)\n   * element.elementsByXPath(value, cb) -> cb(err, elements)\n   * element.elementsByCss(value, cb) -> cb(err, elements)\n   * element.elementsByIosUIAUtomation(value, cb) -> cb(err, elements)\n   * element.elementsByIosClassChain(value, cb) -> cb(err, elements)\n   * element.elementsByIosPredicateString(value, cb) -> cb(err, elements)\n   * element.elementsByAndroidUIAutomator(value, cb) -> cb(err, elements)\n   * element.elementsByAccessibilityId(value, cb) -> cb(err, elements)\n   *\n   * @jsonWire POST /session/:sessionId/element/:id/elements\n   * @docOrder 2\n   */\n\n\n  elementCommands['elements' + utils.elFuncSuffix(type)] = function (value, cb) {\n    elementCommands.elements.apply(this, [utils.elFuncFullType(type), value, cb]);\n  };\n});\n/**\n * element.element(using, value, cb) -> cb(err, element)\n *\n * @jsonWire POST /session/:sessionId/element/:id/element\n * @docOrder 1\n */\n\n\nelementCommands.element = function (using, value, cb) {\n  var _this = this;\n\n  this.browser._jsonWireCall({\n    method: 'POST',\n    relPath: '/element/' + _this.value + '/element',\n    data: {\n      using: using,\n      value: value\n    },\n    cb: elementCallback(cb, this.browser)\n  });\n};\n/**\n * element.elements(using, value, cb) -> cb(err, elements)\n *\n * @jsonWire POST /session/:sessionId/element/:id/elements\n * @docOrder 1\n */\n\n\nelementCommands.elements = function (using, value, cb) {\n  var _this = this;\n\n  this.browser._jsonWireCall({\n    method: 'POST',\n    relPath: '/element/' + _this.value + '/elements',\n    data: {\n      using: using,\n      value: value\n    },\n    cb: elementsCallback(cb, this.browser)\n  });\n};\n/**\n * element.equals(other, cb) -> cb(err, value)\n *\n * @jsonWire GET /session/:sessionId/element/:id/equals/:other\n * @docOrder 1\n */\n\n\nelementCommands.equals = function (other, cb) {\n  commands.equalsElement.apply(this.browser, [this, other, cb]);\n};\n/**\n * element.sleep(ms, cb) -> cb(err)\n */\n\n\nelementCommands.sleep = function (ms, cb) {\n  cb = cb || function () {};\n\n  setTimeout(cb, ms);\n};\n/**\n * element.noop(cb) -> cb(err)\n */\n\n\nelementCommands.noop = function (cb) {\n  if (cb) {\n    cb();\n  }\n};\n/**\n * element.performMultiAction(actions) -> cb(err, touchStateObjects)\n *\n * @jsonWire POST /session/:sessionId/touch/multi/perform\n */\n\n\nelementCommands.performMultiAction = function (actions, cb) {\n  commands.performMultiAction.apply(this.browser, [this, actions, cb]);\n};\n/**\n * element.rotate(opts, cb) -> cb(err)\n * opts is like the following:\n * {x: 114, y: 198, duration: 5, radius: 3, rotation: 220, touchCount: 2}\n *\n * @jsonWire POST /session/:sessionId/appium/device/rotate\n */\n\n\nelementCommands.rotate = function (opts, cb) {\n  commands.rotateDevice.apply(this.browser, [this, opts, cb]);\n};\n/**\n * element.setImmediateValueInApp(value, cb) -> cb(err)\n *\n * @jsonWire POST /session/:sessionId/appium/element/:elementId?/value\n */\n\n\nelementCommands.setImmediateValueInApp = function (value, cb) {\n  commands.setImmediateValueInApp.apply(this.browser, [this, value, cb]);\n};\n/**\n * element.setImmediateValue(value, cb) -> cb(err)\n *\n * @jsonWire POST /session/:sessionId/appium/element/:elementId?/value\n */\n\n\nelementCommands.setImmediateValue = elementCommands.setImmediateValueInApp;\nmodule.exports = elementCommands;","map":null,"metadata":{},"sourceType":"script"}