{"ast":null,"code":"//\n// vargs.js\n//\n//   variable argument handling for functions taking a callback\n//\n// usage:\n//   \n//   var Args = new(\"vargs\").Constructor;\n//\n//   function (/* [arg1, arg2, ...][,callback] */) {\n//       var args = new(Args)(arguments);\n//       \n//       args.first;    // first argument\n//       args.last;     // last argument before callback\n//       args.callback; // callback argument, or an empty function\n//       args.all;      // all arguments except callback\n//       args.length;   // number of arguments, not including callback\n//       \n//       args.callbackGiven() // returns true or false\n//       args.at(-1)          // last argument, including callback\n//       args.array           // all arguments, including callback\n//   }\n//\nexports.Constructor = function Vargs(arguments) {\n  this.array = Array.prototype.slice.call(arguments);\n\n  this.__defineGetter__('length', function () {\n    if (this.callbackGiven()) {\n      return this.array.length - 1;\n    } else {\n      return this.array.length;\n    }\n  });\n\n  this.__defineGetter__('all', function () {\n    if (this.callbackGiven()) {\n      return this.array.slice(0, -1);\n    } else {\n      return this.array;\n    }\n  });\n\n  this.__defineGetter__('last', function () {\n    if (typeof this.at(-1) === 'function') {\n      return this.at(-2);\n    } else {\n      return this.at(-1);\n    }\n  });\n\n  this.__defineGetter__('first', function () {\n    return this.array[0];\n  });\n\n  this.callback = this.callbackGiven() ? this.at(-1) : function () {};\n};\n\nexports.Constructor.prototype = {\n  callbackGiven: function callbackGiven() {\n    return typeof this.at(-1) === 'function';\n  },\n  at: function at(n) {\n    if (n < 0) {\n      return this.array[this.array.length + n];\n    } else {\n      return this.array[n];\n    }\n  }\n};\n\nexports.Constructor.last = function (args) {\n  return args[args.length - 1];\n};","map":null,"metadata":{},"sourceType":"script"}