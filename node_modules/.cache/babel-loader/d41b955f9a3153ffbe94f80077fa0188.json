{"ast":null,"code":"/* Generated by `npm run build`, do not edit! */\n\"use strict\";\n\nvar tt = require(\"acorn\").tokTypes;\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nvar nextTokenIsDot = function nextTokenIsDot(parser) {\n  skipWhiteSpace.lastIndex = parser.pos;\n  var skip = skipWhiteSpace.exec(parser.input);\n  var next = parser.pos + skip[0].length;\n  return parser.input.slice(next, next + 1) === \".\";\n};\n\nmodule.exports = function (Parser) {\n  return (\n    /*@__PURE__*/\n    function (Parser) {\n      function anonymous() {\n        Parser.apply(this, arguments);\n      }\n\n      if (Parser) anonymous.__proto__ = Parser;\n      anonymous.prototype = Object.create(Parser && Parser.prototype);\n      anonymous.prototype.constructor = anonymous;\n\n      anonymous.prototype.parseExprAtom = function parseExprAtom(refDestructuringErrors) {\n        if (this.type !== tt._import || !nextTokenIsDot(this)) {\n          return Parser.prototype.parseExprAtom.call(this, refDestructuringErrors);\n        }\n\n        if (!this.options.allowImportExportEverywhere && !this.inModule) {\n          this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\");\n        }\n\n        var node = this.startNode();\n        node.meta = this.parseIdent(true);\n        this.expect(tt.dot);\n        node.property = this.parseIdent(true);\n\n        if (node.property.name !== \"meta\") {\n          this.raiseRecoverable(node.property.start, \"The only valid meta property for import is import.meta\");\n        }\n\n        if (this.containsEsc) {\n          this.raiseRecoverable(node.property.start, \"\\\"meta\\\" in import.meta must not contain escape sequences\");\n        }\n\n        return this.finishNode(node, \"MetaProperty\");\n      };\n\n      anonymous.prototype.parseStatement = function parseStatement(context, topLevel, exports) {\n        if (this.type !== tt._import || !nextTokenIsDot(this)) {\n          return Parser.prototype.parseStatement.call(this, context, topLevel, exports);\n        }\n\n        var node = this.startNode();\n        var expr = this.parseExpression();\n        return this.parseExpressionStatement(node, expr);\n      };\n\n      return anonymous;\n    }(Parser)\n  );\n};","map":null,"metadata":{},"sourceType":"script"}