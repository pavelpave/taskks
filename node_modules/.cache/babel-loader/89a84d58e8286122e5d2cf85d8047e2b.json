{"ast":null,"code":"/**\r\n * Archiver Core\r\n *\r\n * @ignore\r\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\r\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\r\n */\nvar fs = require('fs');\n\nvar glob = require('glob');\n\nvar async = require('async');\n\nvar _ = require('lodash');\n\nvar path = require('path');\n\nvar util = require('archiver-utils');\n\nvar inherits = require('util').inherits;\n\nvar ArchiverError = require('./error');\n\nvar Transform = require('readable-stream').Transform;\n\nvar win32 = process.platform === 'win32';\n/**\r\n * @constructor\r\n * @param {String} format The archive format to use.\r\n * @param {(CoreOptions|TransformOptions)} options See also {@link ZipOptions} and {@link TarOptions}.\r\n */\n\nvar Archiver = function Archiver(format, options) {\n  if (!(this instanceof Archiver)) {\n    return new Archiver(format, options);\n  }\n\n  if (typeof format !== 'string') {\n    options = format;\n    format = 'zip';\n  }\n\n  options = this.options = util.defaults(options, {\n    highWaterMark: 1024 * 1024,\n    statConcurrency: 4\n  });\n  Transform.call(this, options);\n  this._format = false;\n  this._module = false;\n  this._pending = 0;\n  this._pointer = 0;\n  this._entriesCount = 0;\n  this._entriesProcessedCount = 0;\n  this._fsEntriesTotalBytes = 0;\n  this._fsEntriesProcessedBytes = 0;\n  this._queue = async.queue(this._onQueueTask.bind(this), 1);\n  this._queue.drain = this._onQueueDrain.bind(this);\n  this._statQueue = async.queue(this._onStatQueueTask.bind(this), options.statConcurrency);\n  this._state = {\n    aborted: false,\n    finalize: false,\n    finalizing: false,\n    finalized: false,\n    modulePiped: false\n  };\n  this._streams = [];\n};\n\ninherits(Archiver, Transform);\n/**\r\n * Internal logic for `abort`.\r\n *\r\n * @private\r\n * @return void\r\n */\n\nArchiver.prototype._abort = function () {\n  this._state.aborted = true;\n\n  this._queue.kill();\n\n  this._statQueue.kill();\n\n  if (this._queue.idle()) {\n    this._shutdown();\n  }\n};\n/**\r\n * Internal helper for appending files.\r\n *\r\n * @private\r\n * @param  {String} filepath The source filepath.\r\n * @param  {EntryData} data The entry data.\r\n * @return void\r\n */\n\n\nArchiver.prototype._append = function (filepath, data) {\n  data = data || {};\n  var task = {\n    source: null,\n    filepath: filepath\n  };\n\n  if (!data.name) {\n    data.name = filepath;\n  }\n\n  data.sourcePath = filepath;\n  task.data = data;\n  this._entriesCount++;\n\n  if (data.stats && data.stats instanceof fs.Stats) {\n    task = this._updateQueueTaskWithStats(task, data.stats);\n\n    if (task) {\n      if (data.stats.size) {\n        this._fsEntriesTotalBytes += data.stats.size;\n      }\n\n      this._queue.push(task);\n    }\n  } else {\n    this._statQueue.push(task);\n  }\n};\n/**\r\n * Internal logic for `finalize`.\r\n *\r\n * @private\r\n * @return void\r\n */\n\n\nArchiver.prototype._finalize = function () {\n  if (this._state.finalizing || this._state.finalized || this._state.aborted) {\n    return;\n  }\n\n  this._state.finalizing = true;\n\n  this._moduleFinalize();\n\n  this._state.finalizing = false;\n  this._state.finalized = true;\n};\n/**\r\n * Checks the various state variables to determine if we can `finalize`.\r\n *\r\n * @private\r\n * @return {Boolean}\r\n */\n\n\nArchiver.prototype._maybeFinalize = function () {\n  if (this._state.finalizing || this._state.finalized || this._state.aborted) {\n    return false;\n  }\n\n  if (this._state.finalize && this._pending === 0 && this._queue.idle() && this._statQueue.idle()) {\n    this._finalize();\n\n    return true;\n  }\n\n  return false;\n};\n/**\r\n * Appends an entry to the module.\r\n *\r\n * @private\r\n * @fires  Archiver#entry\r\n * @param  {(Buffer|Stream)} source\r\n * @param  {EntryData} data\r\n * @param  {Function} callback\r\n * @return void\r\n */\n\n\nArchiver.prototype._moduleAppend = function (source, data, callback) {\n  if (this._state.aborted) {\n    callback();\n    return;\n  }\n\n  this._module.append(source, data, function (err) {\n    this._task = null;\n\n    if (this._state.aborted) {\n      this._shutdown();\n\n      return;\n    }\n\n    if (err) {\n      this.emit('error', err);\n      setImmediate(callback);\n      return;\n    }\n    /**\r\n     * Fires when the entry's input has been processed and appended to the archive.\r\n     *\r\n     * @event Archiver#entry\r\n     * @type {EntryData}\r\n     */\n\n\n    this.emit('entry', data);\n    this._entriesProcessedCount++;\n\n    if (data.stats && data.stats.size) {\n      this._fsEntriesProcessedBytes += data.stats.size;\n    }\n    /**\r\n     * @event Archiver#progress\r\n     * @type {ProgressData}\r\n     */\n\n\n    this.emit('progress', {\n      entries: {\n        total: this._entriesCount,\n        processed: this._entriesProcessedCount\n      },\n      fs: {\n        totalBytes: this._fsEntriesTotalBytes,\n        processedBytes: this._fsEntriesProcessedBytes\n      }\n    });\n    setImmediate(callback);\n  }.bind(this));\n};\n/**\r\n * Finalizes the module.\r\n *\r\n * @private\r\n * @return void\r\n */\n\n\nArchiver.prototype._moduleFinalize = function () {\n  if (typeof this._module.finalize === 'function') {\n    this._module.finalize();\n  } else if (typeof this._module.end === 'function') {\n    this._module.end();\n  } else {\n    this.emit('error', new ArchiverError('NOENDMETHOD'));\n    return;\n  }\n};\n/**\r\n * Pipes the module to our internal stream with error bubbling.\r\n *\r\n * @private\r\n * @return void\r\n */\n\n\nArchiver.prototype._modulePipe = function () {\n  this._module.on('error', this._onModuleError.bind(this));\n\n  this._module.pipe(this);\n\n  this._state.modulePiped = true;\n};\n/**\r\n * Determines if the current module supports a defined feature.\r\n *\r\n * @private\r\n * @param  {String} key\r\n * @return {Boolean}\r\n */\n\n\nArchiver.prototype._moduleSupports = function (key) {\n  if (!this._module.supports || !this._module.supports[key]) {\n    return false;\n  }\n\n  return this._module.supports[key];\n};\n/**\r\n * Unpipes the module from our internal stream.\r\n *\r\n * @private\r\n * @return void\r\n */\n\n\nArchiver.prototype._moduleUnpipe = function () {\n  this._module.unpipe(this);\n\n  this._state.modulePiped = false;\n};\n/**\r\n * Normalizes entry data with fallbacks for key properties.\r\n *\r\n * @private\r\n * @param  {Object} data\r\n * @param  {fs.Stats} stats\r\n * @return {Object}\r\n */\n\n\nArchiver.prototype._normalizeEntryData = function (data, stats) {\n  data = util.defaults(data, {\n    type: 'file',\n    name: null,\n    date: null,\n    mode: null,\n    prefix: null,\n    sourcePath: null,\n    stats: false\n  });\n\n  if (stats && data.stats === false) {\n    data.stats = stats;\n  }\n\n  var isDir = data.type === 'directory';\n\n  if (data.name) {\n    if (typeof data.prefix === 'string' && '' !== data.prefix) {\n      data.name = data.prefix + '/' + data.name;\n      data.prefix = null;\n    }\n\n    data.name = util.sanitizePath(data.name);\n\n    if (data.type !== 'symlink' && data.name.slice(-1) === '/') {\n      isDir = true;\n      data.type = 'directory';\n    } else if (isDir) {\n      data.name += '/';\n    }\n  } // 511 === 0777; 493 === 0755; 438 === 0666; 420 === 0644\n\n\n  if (typeof data.mode === 'number') {\n    if (win32) {\n      data.mode &= 511;\n    } else {\n      data.mode &= 4095;\n    }\n  } else if (data.stats && data.mode === null) {\n    if (win32) {\n      data.mode = data.stats.mode & 511;\n    } else {\n      data.mode = data.stats.mode & 4095;\n    } // stat isn't reliable on windows; force 0755 for dir\n\n\n    if (win32 && isDir) {\n      data.mode = 493;\n    }\n  } else if (data.mode === null) {\n    data.mode = isDir ? 493 : 420;\n  }\n\n  if (data.stats && data.date === null) {\n    data.date = data.stats.mtime;\n  } else {\n    data.date = util.dateify(data.date);\n  }\n\n  return data;\n};\n/**\r\n * Error listener that re-emits error on to our internal stream.\r\n *\r\n * @private\r\n * @param  {Error} err\r\n * @return void\r\n */\n\n\nArchiver.prototype._onModuleError = function (err) {\n  /**\r\n   * @event Archiver#error\r\n   * @type {ErrorData}\r\n   */\n  this.emit('error', err);\n};\n/**\r\n * Checks the various state variables after queue has drained to determine if\r\n * we need to `finalize`.\r\n *\r\n * @private\r\n * @return void\r\n */\n\n\nArchiver.prototype._onQueueDrain = function () {\n  if (this._state.finalizing || this._state.finalized || this._state.aborted) {\n    return;\n  }\n\n  if (this._state.finalize && this._pending === 0 && this._queue.idle() && this._statQueue.idle()) {\n    this._finalize();\n\n    return;\n  }\n};\n/**\r\n * Appends each queue task to the module.\r\n *\r\n * @private\r\n * @param  {Object} task\r\n * @param  {Function} callback\r\n * @return void\r\n */\n\n\nArchiver.prototype._onQueueTask = function (task, callback) {\n  if (this._state.finalizing || this._state.finalized || this._state.aborted) {\n    callback();\n    return;\n  }\n\n  this._task = task;\n\n  this._moduleAppend(task.source, task.data, callback);\n};\n/**\r\n * Performs a file stat and reinjects the task back into the queue.\r\n *\r\n * @private\r\n * @param  {Object} task\r\n * @param  {Function} callback\r\n * @return void\r\n */\n\n\nArchiver.prototype._onStatQueueTask = function (task, callback) {\n  if (this._state.finalizing || this._state.finalized || this._state.aborted) {\n    callback();\n    return;\n  }\n\n  fs.lstat(task.filepath, function (err, stats) {\n    if (this._state.aborted) {\n      setImmediate(callback);\n      return;\n    }\n\n    if (err) {\n      this._entriesCount--;\n      /**\r\n       * @event Archiver#warning\r\n       * @type {ErrorData}\r\n       */\n\n      this.emit('warning', err);\n      setImmediate(callback);\n      return;\n    }\n\n    task = this._updateQueueTaskWithStats(task, stats);\n\n    if (task) {\n      if (stats.size) {\n        this._fsEntriesTotalBytes += stats.size;\n      }\n\n      this._queue.push(task);\n    }\n\n    setImmediate(callback);\n  }.bind(this));\n};\n/**\r\n * Unpipes the module and ends our internal stream.\r\n *\r\n * @private\r\n * @return void\r\n */\n\n\nArchiver.prototype._shutdown = function () {\n  this._moduleUnpipe();\n\n  this.end();\n};\n/**\r\n * Tracks the bytes emitted by our internal stream.\r\n *\r\n * @private\r\n * @param  {Buffer} chunk\r\n * @param  {String} encoding\r\n * @param  {Function} callback\r\n * @return void\r\n */\n\n\nArchiver.prototype._transform = function (chunk, encoding, callback) {\n  if (chunk) {\n    this._pointer += chunk.length;\n  }\n\n  callback(null, chunk);\n};\n/**\r\n * Updates and normalizes a queue task using stats data.\r\n *\r\n * @private\r\n * @param  {Object} task\r\n * @param  {fs.Stats} stats\r\n * @return {Object}\r\n */\n\n\nArchiver.prototype._updateQueueTaskWithStats = function (task, stats) {\n  if (stats.isFile()) {\n    task.data.type = 'file';\n    task.data.sourceType = 'stream';\n    task.source = util.lazyReadStream(task.filepath);\n  } else if (stats.isDirectory() && this._moduleSupports('directory')) {\n    task.data.name = util.trailingSlashIt(task.data.name);\n    task.data.type = 'directory';\n    task.data.sourcePath = util.trailingSlashIt(task.filepath);\n    task.data.sourceType = 'buffer';\n    task.source = new Buffer(0);\n  } else if (stats.isSymbolicLink() && this._moduleSupports('symlink')) {\n    var linkPath = fs.readlinkSync(task.filepath);\n    var dirName = path.dirname(task.filepath);\n    task.data.type = 'symlink';\n    task.data.linkname = path.relative(dirName, path.resolve(dirName, linkPath));\n    task.data.sourceType = 'buffer';\n    task.source = new Buffer(0);\n  } else {\n    if (stats.isDirectory()) {\n      this.emit('warning', new ArchiverError('DIRECTORYNOTSUPPORTED', task.data));\n    } else if (stats.isSymbolicLink()) {\n      this.emit('warning', new ArchiverError('SYMLINKNOTSUPPORTED', task.data));\n    } else {\n      this.emit('warning', new ArchiverError('ENTRYNOTSUPPORTED', task.data));\n    }\n\n    return null;\n  }\n\n  task.data = this._normalizeEntryData(task.data, stats);\n  return task;\n};\n/**\r\n * Aborts the archiving process, taking a best-effort approach, by:\r\n *\r\n * - removing any pending queue tasks\r\n * - allowing any active queue workers to finish\r\n * - detaching internal module pipes\r\n * - ending both sides of the Transform stream\r\n *\r\n * It will NOT drain any remaining sources.\r\n *\r\n * @return {this}\r\n */\n\n\nArchiver.prototype.abort = function () {\n  if (this._state.aborted || this._state.finalized) {\n    return this;\n  }\n\n  this._abort();\n\n  return this;\n};\n/**\r\n * Appends an input source (text string, buffer, or stream) to the instance.\r\n *\r\n * When the instance has received, processed, and emitted the input, the `entry`\r\n * event is fired.\r\n *\r\n * @fires  Archiver#entry\r\n * @param  {(Buffer|Stream|String)} source The input source.\r\n * @param  {EntryData} data See also {@link ZipEntryData} and {@link TarEntryData}.\r\n * @return {this}\r\n */\n\n\nArchiver.prototype.append = function (source, data) {\n  if (this._state.finalize || this._state.aborted) {\n    this.emit('error', new ArchiverError('QUEUECLOSED'));\n    return this;\n  }\n\n  data = this._normalizeEntryData(data);\n\n  if (typeof data.name !== 'string' || data.name.length === 0) {\n    this.emit('error', new ArchiverError('ENTRYNAMEREQUIRED'));\n    return this;\n  }\n\n  if (data.type === 'directory' && !this._moduleSupports('directory')) {\n    this.emit('error', new ArchiverError('DIRECTORYNOTSUPPORTED', {\n      name: data.name\n    }));\n    return this;\n  }\n\n  source = util.normalizeInputSource(source);\n\n  if (Buffer.isBuffer(source)) {\n    data.sourceType = 'buffer';\n  } else if (util.isStream(source)) {\n    data.sourceType = 'stream';\n  } else {\n    this.emit('error', new ArchiverError('INPUTSTEAMBUFFERREQUIRED', {\n      name: data.name\n    }));\n    return this;\n  }\n\n  this._entriesCount++;\n\n  this._queue.push({\n    data: data,\n    source: source\n  });\n\n  return this;\n};\n/**\r\n * Appends a directory and its files, recursively, given its dirpath.\r\n *\r\n * @param  {String} dirpath The source directory path.\r\n * @param  {String} destpath The destination path within the archive.\r\n * @param  {(EntryData|Function)} data See also [ZipEntryData]{@link ZipEntryData} and\r\n * [TarEntryData]{@link TarEntryData}.\r\n * @return {this}\r\n */\n\n\nArchiver.prototype.directory = function (dirpath, destpath, data) {\n  if (this._state.finalize || this._state.aborted) {\n    this.emit('error', new ArchiverError('QUEUECLOSED'));\n    return this;\n  }\n\n  if (typeof dirpath !== 'string' || dirpath.length === 0) {\n    this.emit('error', new ArchiverError('DIRECTORYDIRPATHREQUIRED'));\n    return this;\n  }\n\n  this._pending++;\n\n  if (destpath === false) {\n    destpath = '';\n  } else if (typeof destpath !== 'string') {\n    destpath = dirpath;\n  }\n\n  var dataFunction = false;\n\n  if (typeof data === 'function') {\n    dataFunction = data;\n    data = {};\n  } else if (typeof data !== 'object') {\n    data = {};\n  }\n\n  var globOptions = {\n    stat: false,\n    dot: true,\n    cwd: dirpath\n  };\n\n  function onGlobEnd() {\n    this._pending--;\n\n    this._maybeFinalize();\n  }\n\n  function onGlobError(err) {\n    this.emit('error', err);\n  }\n\n  function onGlobMatch(match) {\n    var ignoreMatch = false;\n\n    var entryData = _.extend({}, data);\n\n    entryData.name = match;\n    entryData.prefix = destpath;\n    match = globber._makeAbs(match);\n\n    try {\n      if (dataFunction) {\n        entryData = dataFunction(entryData);\n\n        if (entryData === false) {\n          ignoreMatch = true;\n        } else if (typeof entryData !== 'object') {\n          throw new ArchiverError('DIRECTORYFUNCTIONINVALIDDATA', {\n            dirpath: dirpath\n          });\n        }\n      }\n    } catch (e) {\n      this.emit('error', e);\n      return;\n    }\n\n    if (ignoreMatch) {\n      return;\n    }\n\n    this._append(match, entryData);\n  }\n\n  var globber = glob('**', globOptions);\n  globber.on('error', onGlobError.bind(this));\n  globber.on('match', onGlobMatch.bind(this));\n  globber.on('end', onGlobEnd.bind(this));\n  return this;\n};\n/**\r\n * Appends a file given its filepath using a\r\n * [lazystream]{@link https://github.com/jpommerening/node-lazystream} wrapper to\r\n * prevent issues with open file limits.\r\n *\r\n * When the instance has received, processed, and emitted the file, the `entry`\r\n * event is fired.\r\n *\r\n * @param  {String} filepath The source filepath.\r\n * @param  {EntryData} data See also [ZipEntryData]{@link ZipEntryData} and\r\n * [TarEntryData]{@link TarEntryData}.\r\n * @return {this}\r\n */\n\n\nArchiver.prototype.file = function (filepath, data) {\n  if (this._state.finalize || this._state.aborted) {\n    this.emit('error', new ArchiverError('QUEUECLOSED'));\n    return this;\n  }\n\n  if (typeof filepath !== 'string' || filepath.length === 0) {\n    this.emit('error', new ArchiverError('FILEFILEPATHREQUIRED'));\n    return this;\n  }\n\n  this._append(filepath, data);\n\n  return this;\n};\n/**\r\n * Appends multiple files that match a glob pattern.\r\n *\r\n * @param  {String} pattern The [glob pattern]{@link https://github.com/isaacs/node-glob#glob-primer} to match.\r\n * @param  {Object} options See [node-glob]{@link https://github.com/isaacs/node-glob#options}.\r\n * @param  {EntryData} data See also [ZipEntryData]{@link ZipEntryData} and\r\n * [TarEntryData]{@link TarEntryData}.\r\n * @return {this}\r\n */\n\n\nArchiver.prototype.glob = function (pattern, options, data) {\n  this._pending++;\n  options = util.defaults(options, {\n    stat: false\n  });\n\n  function onGlobEnd() {\n    this._pending--;\n\n    this._maybeFinalize();\n  }\n\n  function onGlobError(err) {\n    this.emit('error', err);\n  }\n\n  function onGlobMatch(match) {\n    var entryData = _.extend({}, data);\n\n    if (options.cwd) {\n      entryData.name = match;\n      match = globber._makeAbs(match);\n    }\n\n    this._append(match, entryData);\n  }\n\n  var globber = glob(pattern, options);\n  globber.on('error', onGlobError.bind(this));\n  globber.on('match', onGlobMatch.bind(this));\n  globber.on('end', onGlobEnd.bind(this));\n  return this;\n};\n/**\r\n * Finalizes the instance and prevents further appending to the archive\r\n * structure (queue will continue til drained).\r\n *\r\n * The `end`, `close` or `finish` events on the destination stream may fire\r\n * right after calling this method so you should set listeners beforehand to\r\n * properly detect stream completion.\r\n *\r\n * @return {this}\r\n */\n\n\nArchiver.prototype.finalize = function () {\n  if (this._state.aborted) {\n    this.emit('error', new ArchiverError('ABORTED'));\n    return this;\n  }\n\n  if (this._state.finalize) {\n    this.emit('error', new ArchiverError('FINALIZING'));\n    return this;\n  }\n\n  this._state.finalize = true;\n\n  if (this._pending === 0 && this._queue.idle() && this._statQueue.idle()) {\n    this._finalize();\n  }\n\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    var errored;\n\n    self._module.on('end', function () {\n      if (!errored) {\n        resolve();\n      }\n    });\n\n    self._module.on('error', function (err) {\n      errored = true;\n      reject(err);\n    });\n  });\n};\n/**\r\n * Sets the module format name used for archiving.\r\n *\r\n * @param {String} format The name of the format.\r\n * @return {this}\r\n */\n\n\nArchiver.prototype.setFormat = function (format) {\n  if (this._format) {\n    this.emit('error', new ArchiverError('FORMATSET'));\n    return this;\n  }\n\n  this._format = format;\n  return this;\n};\n/**\r\n * Sets the module used for archiving.\r\n *\r\n * @param {Function} module The function for archiver to interact with.\r\n * @return {this}\r\n */\n\n\nArchiver.prototype.setModule = function (module) {\n  if (this._state.aborted) {\n    this.emit('error', new ArchiverError('ABORTED'));\n    return this;\n  }\n\n  if (this._state.module) {\n    this.emit('error', new ArchiverError('MODULESET'));\n    return this;\n  }\n\n  this._module = module;\n\n  this._modulePipe();\n\n  return this;\n};\n/**\r\n * Appends a symlink to the instance.\r\n *\r\n * This does NOT interact with filesystem and is used for programmatically creating symlinks.\r\n *\r\n * @param  {String} filepath The symlink path (within archive).\r\n * @param  {String} target The target path (within archive).\r\n * @return {this}\r\n */\n\n\nArchiver.prototype.symlink = function (filepath, target) {\n  if (this._state.finalize || this._state.aborted) {\n    this.emit('error', new ArchiverError('QUEUECLOSED'));\n    return this;\n  }\n\n  if (typeof filepath !== 'string' || filepath.length === 0) {\n    this.emit('error', new ArchiverError('SYMLINKFILEPATHREQUIRED'));\n    return this;\n  }\n\n  if (typeof target !== 'string' || target.length === 0) {\n    this.emit('error', new ArchiverError('SYMLINKTARGETREQUIRED', {\n      filepath: filepath\n    }));\n    return this;\n  }\n\n  if (!this._moduleSupports('symlink')) {\n    this.emit('error', new ArchiverError('SYMLINKNOTSUPPORTED', {\n      filepath: filepath\n    }));\n    return this;\n  }\n\n  var data = {};\n  data.type = 'symlink';\n  data.name = filepath.replace(/\\\\/g, '/');\n  data.linkname = target.replace(/\\\\/g, '/');\n  data.sourceType = 'buffer';\n  this._entriesCount++;\n\n  this._queue.push({\n    data: data,\n    source: new Buffer(0)\n  });\n\n  return this;\n};\n/**\r\n * Returns the current length (in bytes) that has been emitted.\r\n *\r\n * @return {Number}\r\n */\n\n\nArchiver.prototype.pointer = function () {\n  return this._pointer;\n};\n/**\r\n * Middleware-like helper that has yet to be fully implemented.\r\n *\r\n * @private\r\n * @param  {Function} plugin\r\n * @return {this}\r\n */\n\n\nArchiver.prototype.use = function (plugin) {\n  this._streams.push(plugin);\n\n  return this;\n};\n\nmodule.exports = Archiver;\n/**\r\n * @typedef {Object} CoreOptions\r\n * @global\r\n * @property {Number} [statConcurrency=4] Sets the number of workers used to\r\n * process the internal fs stat queue.\r\n */\n\n/**\r\n * @typedef {Object} TransformOptions\r\n * @property {Boolean} [allowHalfOpen=true] If set to false, then the stream\r\n * will automatically end the readable side when the writable side ends and vice\r\n * versa.\r\n * @property {Boolean} [readableObjectMode=false] Sets objectMode for readable\r\n * side of the stream. Has no effect if objectMode is true.\r\n * @property {Boolean} [writableObjectMode=false] Sets objectMode for writable\r\n * side of the stream. Has no effect if objectMode is true.\r\n * @property {Boolean} [decodeStrings=true] Whether or not to decode strings\r\n * into Buffers before passing them to _write(). `Writable`\r\n * @property {String} [encoding=NULL] If specified, then buffers will be decoded\r\n * to strings using the specified encoding. `Readable`\r\n * @property {Number} [highWaterMark=16kb] The maximum number of bytes to store\r\n * in the internal buffer before ceasing to read from the underlying resource.\r\n * `Readable` `Writable`\r\n * @property {Boolean} [objectMode=false] Whether this stream should behave as a\r\n * stream of objects. Meaning that stream.read(n) returns a single value instead\r\n * of a Buffer of size n. `Readable` `Writable`\r\n */\n\n/**\r\n * @typedef {Object} EntryData\r\n * @property {String} name Sets the entry name including internal path.\r\n * @property {(String|Date)} [date=NOW()] Sets the entry date.\r\n * @property {Number} [mode=D:0755/F:0644] Sets the entry permissions.\r\n * @property {String} [prefix] Sets a path prefix for the entry name. Useful\r\n * when working with methods like `directory` or `glob`.\r\n * @property {fs.Stats} [stats] Sets the fs stat data for this entry allowing\r\n * for reduction of fs stat calls when stat data is already known.\r\n */\n\n/**\r\n * @typedef {Object} ErrorData\r\n * @property {String} message The message of the error.\r\n * @property {String} code The error code assigned to this error.\r\n * @property {String} data Additional data provided for reporting or debugging (where available).\r\n */\n\n/**\r\n * @typedef {Object} ProgressData\r\n * @property {Object} entries\r\n * @property {Number} entries.total Number of entries that have been appended.\r\n * @property {Number} entries.processed Number of entries that have been processed.\r\n * @property {Object} fs\r\n * @property {Number} fs.totalBytes Number of bytes that have been appended. Calculated asynchronously and might not be accurate: it growth while entries are added. (based on fs.Stats)\r\n * @property {Number} fs.processedBytes Number of bytes that have been processed. (based on fs.Stats)\r\n */","map":null,"metadata":{},"sourceType":"script"}