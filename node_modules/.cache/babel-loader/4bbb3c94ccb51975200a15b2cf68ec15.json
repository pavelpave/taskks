{"ast":null,"code":"var _regeneratorRuntime = require(\"/home/garpix/task_react_App/myapp/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/garpix/task_react_App/myapp/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('child_process'),\n    spawn = _require.spawn;\n\nvar platform = require('os').platform();\n\nvar defaultDir = __dirname + '/bin';\nvar bin = './ngrok' + (platform === 'win32' ? '.exe' : '');\nvar ready = /starting web service.*addr=(\\d+\\.\\d+\\.\\d+\\.\\d+:\\d+)/;\nvar inUse = /address already in use/;\nvar processPromise, activeProcess;\n/*\n\tngrok process runs internal ngrok api\n\tand should be spawned only ONCE \n\t(respawn allowed if it fails or .kill method called)\n*/\n\nfunction getProcess(_x) {\n  return _getProcess.apply(this, arguments);\n}\n\nfunction _getProcess() {\n  _getProcess = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(opts) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!processPromise) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", processPromise);\n\n          case 2:\n            _context.prev = 2;\n            processPromise = startProcess(opts);\n            _context.next = 6;\n            return processPromise;\n\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](2);\n            processPromise = null;\n            throw _context.t0;\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 9]]);\n  }));\n  return _getProcess.apply(this, arguments);\n}\n\nfunction startProcess(_x2) {\n  return _startProcess.apply(this, arguments);\n}\n\nfunction _startProcess() {\n  _startProcess = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(opts) {\n    var dir, start, ngrok, resolve, reject, apiUrl, url;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            dir = defaultDir;\n            start = ['start', '--none', '--log=stdout'];\n            if (opts.region) start.push('--region=' + opts.region);\n            if (opts.configPath) start.push('--config=' + opts.configPath);\n            if (opts.binPath) dir = opts.binPath(dir);\n            ngrok = spawn(bin, start, {\n              cwd: dir\n            });\n            apiUrl = new Promise(function (res, rej) {\n              resolve = res;\n              reject = rej;\n            });\n            ngrok.stdout.on('data', function (data) {\n              var msg = data.toString();\n              var addr = msg.match(ready);\n\n              if (addr) {\n                resolve(\"http://\".concat(addr[1]));\n              } else if (msg.match(inUse)) {\n                reject(new Error(msg.substring(0, 10000)));\n              }\n            });\n            ngrok.stderr.on('data', function (data) {\n              var msg = data.toString().substring(0, 10000);\n              reject(new Error(msg));\n            });\n            ngrok.on('exit', function () {\n              processPromise = null;\n              activeProcess = null;\n            });\n            process.on('exit',\n            /*#__PURE__*/\n            _asyncToGenerator(\n            /*#__PURE__*/\n            _regeneratorRuntime.mark(function _callee2() {\n              return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      _context2.next = 2;\n                      return killProcess();\n\n                    case 2:\n                      return _context2.abrupt(\"return\", _context2.sent);\n\n                    case 3:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _callee2);\n            })));\n            _context3.prev = 11;\n            _context3.next = 14;\n            return apiUrl;\n\n          case 14:\n            url = _context3.sent;\n            activeProcess = ngrok;\n            return _context3.abrupt(\"return\", url);\n\n          case 19:\n            _context3.prev = 19;\n            _context3.t0 = _context3[\"catch\"](11);\n            ngrok.kill();\n            throw _context3.t0;\n\n          case 23:\n            _context3.prev = 23;\n            ngrok.stdout.removeAllListeners('data');\n            ngrok.stderr.removeAllListeners('data');\n            return _context3.finish(23);\n\n          case 27:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[11, 19, 23, 27]]);\n  }));\n  return _startProcess.apply(this, arguments);\n}\n\nfunction killProcess() {\n  if (!activeProcess) return;\n  return new Promise(function (resolve) {\n    activeProcess.on('exit', function () {\n      return resolve();\n    });\n    activeProcess.kill();\n  });\n}\n/**\n * @param {string | INgrokOptions} optsOrToken\n */\n\n\nfunction setAuthtoken(_x3) {\n  return _setAuthtoken.apply(this, arguments);\n}\n\nfunction _setAuthtoken() {\n  _setAuthtoken = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(optsOrToken) {\n    var isOpts, opts, token, authtoken, dir, ngrok, killed;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            isOpts = typeof optsOrToken !== 'string';\n            opts = isOpts ? optsOrToken : {};\n            token = isOpts ? opts.authtoken : optsOrToken;\n            authtoken = ['authtoken', token];\n            if (opts.configPath) authtoken.push('--config=' + opts.configPath);\n            dir = defaultDir;\n            if (opts.binPath) dir = opts.binPath(dir);\n            ngrok = spawn(bin, authtoken, {\n              cwd: dir\n            });\n            killed = new Promise(function (resolve, reject) {\n              ngrok.stdout.once('data', function () {\n                return resolve();\n              });\n              ngrok.stderr.once('data', function () {\n                return reject(new Error('cant set authtoken'));\n              });\n            });\n            _context4.prev = 9;\n            _context4.next = 12;\n            return killed;\n\n          case 12:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 13:\n            _context4.prev = 13;\n            ngrok.kill();\n            return _context4.finish(13);\n\n          case 16:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[9,, 13, 16]]);\n  }));\n  return _setAuthtoken.apply(this, arguments);\n}\n\nmodule.exports = {\n  getProcess: getProcess,\n  killProcess: killProcess,\n  setAuthtoken: setAuthtoken\n};","map":null,"metadata":{},"sourceType":"script"}