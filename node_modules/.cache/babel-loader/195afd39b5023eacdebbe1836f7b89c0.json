{"ast":null,"code":"var promise = require('./promise'),\n    flatten = require('./flatten'),\n    def = require('./def'),\n    noop = function noop() {};\n\nmodule.exports = function emitterify(body, hooks) {\n  body = body || {};\n  hooks = hooks || {};\n  def(body, 'emit', emit, 1);\n  def(body, 'once', once, 1);\n  def(body, 'off', off, 1);\n  def(body, 'on', on, 1);\n  body.on['*'] = body.on['*'] || [];\n  return body;\n\n  function emit(type, pm, filter) {\n    var li = body.on[type.split('.')[0]] || [],\n        results = [];\n\n    for (var i = 0; i < li.length; i++) {\n      if (!li[i].ns || !filter || filter(li[i].ns)) results.push(call(li[i].isOnce ? li.splice(i--, 1)[0] : li[i], pm));\n    }\n\n    for (var i = 0; i < body.on['*'].length; i++) {\n      results.push(call(body.on['*'][i], [type, pm]));\n    }\n\n    return results.reduce(flatten, []);\n  }\n\n  function call(cb, pm) {\n    return cb.next ? cb.next(pm) : pm instanceof Array ? cb.apply(body, pm) : cb.call(body, pm);\n  }\n\n  function on(type, opts, isOnce) {\n    var id = type.split('.')[0],\n        ns = type.split('.')[1],\n        li = body.on[id] = body.on[id] || [],\n        cb = typeof opts == 'function' ? opts : 0;\n    return !cb && ns ? (cb = body.on[id]['$' + ns]) ? cb : push(observable(body, opts)) : !cb && !ns ? push(observable(body, opts)) : cb && ns ? push((remove(li, body.on[id]['$' + ns] || -1), cb)) : cb && !ns ? push(cb) : false;\n\n    function push(cb) {\n      cb.isOnce = isOnce;\n      cb.type = id;\n      if (ns) body.on[id]['$' + (cb.ns = ns)] = cb;\n      li.push(cb);\n      (hooks.on || noop)(cb);\n      return cb.next ? cb : body;\n    }\n  }\n\n  function once(type, callback) {\n    return body.on(type, callback, true);\n  }\n\n  function remove(li, cb) {\n    var i = li.length;\n\n    while (~--i) {\n      if (cb == li[i] || cb == li[i].fn || !cb) (hooks.off || noop)(li.splice(i, 1)[0]);\n    }\n  }\n\n  function off(type, cb) {\n    remove(body.on[type] || [], cb);\n    if (cb && cb.ns) delete body.on[type]['$' + cb.ns];\n    return body;\n  }\n\n  function observable(parent, opts) {\n    opts = opts || {};\n    var o = emitterify(opts.base || promise());\n    o.i = 0;\n    o.li = [];\n    o.fn = opts.fn;\n    o.parent = parent;\n    o.source = opts.fn ? o.parent.source : o;\n    o.on('stop', function (reason) {\n      o.type ? o.parent.off(o.type, o) : o.parent.off(o);\n      return o.reason = reason;\n    });\n\n    o.each = function (fn) {\n      var n = fn.next ? fn : observable(o, {\n        fn: fn\n      });\n      o.li.push(n);\n      return n;\n    };\n\n    o.pipe = function (fn) {\n      return fn(o);\n    };\n\n    o.map = function (fn) {\n      return o.each(function (d, i, n) {\n        return n.next(fn(d, i, n));\n      });\n    };\n\n    o.filter = function (fn) {\n      return o.each(function (d, i, n) {\n        return fn(d, i, n) && n.next(d);\n      });\n    };\n\n    o.reduce = function (fn, acc) {\n      return o.each(function (d, i, n) {\n        return n.next(acc = fn(acc, d, i, n));\n      });\n    };\n\n    o.unpromise = function () {\n      var n = observable(o, {\n        base: {},\n        fn: function fn(d) {\n          return n.next(d);\n        }\n      });\n      o.li.push(n);\n      return n;\n    };\n\n    o.next = function (value) {\n      o.resolve && o.resolve(value);\n      return o.li.length ? o.li.map(function (n) {\n        return n.fn(value, n.i++, n);\n      }) : value;\n    };\n\n    o.until = function (stop) {\n      return !stop ? 0 : stop.each ? stop.each(o.stop) // TODO: check clean up on stop too\n      : stop.then ? stop.then(o.stop) : stop.call ? o.filter(stop).map(o.stop) : 0;\n    };\n\n    o.off = function (fn) {\n      return remove(o.li, fn), o;\n    };\n\n    o.start = function (stop) {\n      o.until(stop);\n      o.source.emit('start');\n      return o;\n    };\n\n    o.stop = function (reason) {\n      return o.source.emit('stop', reason);\n    };\n\n    o[Symbol.asyncIterator] = function () {\n      return {\n        next: function next() {\n          return o.wait = new Promise(function (resolve) {\n            o.wait = true;\n            o.map(function (d, i, n) {\n              delete o.wait;\n              o.off(n);\n              resolve({\n                value: d,\n                done: false\n              });\n            });\n            o.emit('pull', o);\n          });\n        }\n      };\n    };\n\n    return o;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}