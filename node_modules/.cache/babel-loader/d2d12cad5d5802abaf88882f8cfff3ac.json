{"ast":null,"code":"var EventEmitter = require('events').EventEmitter,\n    _ = require(\"lodash\"),\n    util = require('util'),\n    url = require('url'),\n    __slice = Array.prototype.slice,\n    utils = require(\"./utils\"),\n    findCallback = utils.findCallback,\n    niceArgs = utils.niceArgs,\n    niceResp = utils.niceResp,\n    strip = utils.strip,\n    deprecator = utils.deprecator,\n    httpUtils = require('./http-utils'),\n    config = require('./config'),\n    Element = require('./element'),\n    commands = require('./commands'),\n    SAUCE_API_HOST = process.env[\"SAUCE_API_HOST\"] || \"saucelabs.com\"; // Webdriver client main class\n// configUrl: url object constructed via url.parse\n\n\nvar Webdriver = module.exports = function (configUrl) {\n  EventEmitter.call(this);\n  this.sessionID = null;\n  this.configUrl = configUrl;\n  this.sauceTestPageRoot = \"https://\" + SAUCE_API_HOST + \"/jobs\";\n  this.sauceRestRoot = \"https://\" + SAUCE_API_HOST + \"/rest/v1\"; // config url without auth\n\n  this.noAuthConfigUrl = url.parse(url.format(this.configUrl));\n  delete this.noAuthConfigUrl.auth;\n  this.defaultCapabilities = {\n    browserName: 'firefox',\n    version: '',\n    javascriptEnabled: true,\n    platform: 'ANY'\n  };\n  this._httpConfig = _.clone(config.httpConfig);\n}; //inherit from EventEmitter\n\n\nutil.inherits(Webdriver, EventEmitter); // creates a new element\n\nWebdriver.prototype.newElement = function (jsonWireElement) {\n  return new Element(jsonWireElement, this);\n};\n/**\n * attach(sessionID, cb) -> cb(err)\n * Connect to an already-active session.\n */\n\n\nWebdriver.prototype.attach = function (sessionID) {\n  var cb = findCallback(arguments);\n  this.sessionID = sessionID;\n\n  if (cb) {\n    cb(null);\n  }\n};\n/**\n * detach(cb) -> cb(err)\n * Detach from the current session.\n */\n\n\nWebdriver.prototype.detach = function () {\n  var cb = findCallback(arguments);\n  this.sessionID = null;\n\n  if (cb) {\n    cb(null);\n  }\n};\n\ncommands.chain = function (obj) {\n  deprecator.warn('chain', 'chain api has been deprecated, use promise chain instead.');\n\n  require(\"./deprecated-chain\").patch(this);\n\n  return this.chain(obj);\n};\n\nWebdriver.prototype._init = function () {\n  delete this.sessionID;\n\n  var _this = this;\n\n  var fargs = utils.varargs(arguments);\n  var cb = fargs.callback,\n      desired = fargs.all[0] || {};\n\n  var _desired = _.clone(desired);\n\n  if (desired.deviceName || desired.device || desired.wdNoDefaults || desired['wd-no-defaults']) {\n    // no default or appium caps, we dont default\n    delete _desired.wdNoDefaults;\n    delete _desired['wd-no-defaults'];\n  } else {\n    // using default\n    _.defaults(_desired, this.defaultCapabilities);\n  } // http options\n\n\n  var httpOpts = httpUtils.newHttpOpts('POST', _this._httpConfig);\n  var url = httpUtils.buildInitUrl(this.configUrl);\n  var data = {}; // building request\n\n  if (_desired.allowW3C || _desired.forceW3C) {\n    data.capabilities = {\n      alwaysMatch: utils.prefixCapabilities(_desired),\n      firstMatch: [{}]\n    };\n  }\n\n  if (!_desired.forceW3C) {\n    data.desiredCapabilities = _desired;\n  }\n\n  httpUtils.emit(this, httpOpts.method, url, data);\n  httpOpts.prepareToSend(url, data);\n  httpUtils.requestWithRetry(httpOpts, this._httpConfig, this.emit.bind(this), function (err, res, data) {\n    if (err) {\n      return cb(err);\n    }\n\n    var resData;\n    var jsonData; // retrieving session\n\n    try {\n      jsonData = JSON.parse(data);\n      _this.sessionID = jsonData.value ? jsonData.value.sessionId : false;\n      resData = jsonData.value;\n\n      if (!_this.sessionID && jsonData.status === 0) {\n        _this.sessionID = jsonData.sessionId;\n      }\n    } catch (ignore) {}\n\n    if (!_this.sessionID) {\n      // attempting to retrieve the session the OLD old way\n      try {\n        var locationArr = res.headers.location.replace(/\\/$/, '').split('/');\n        _this.sessionID = locationArr[locationArr.length - 1];\n      } catch (ignore) {}\n    }\n\n    if (_this.sessionID) {\n      if (/saucelabs\\.com/.exec(url.hostname)) {\n        _this.emit('status', '\\nDriving the web on session: ' + _this.sauceTestPageRoot + '/' + _this.sessionID + '\\n');\n      } else {\n        _this.emit('status', '\\nDriving the web on session: ' + _this.sessionID + '\\n');\n      }\n\n      if (cb) {\n        cb(null, _this.sessionID, resData);\n      }\n    } else {\n      data = strip(data);\n\n      if (cb) {\n        err = new Error('The environment you requested was unavailable.' + (jsonData && jsonData.value ? '\\n' + jsonData.value.message : ''));\n        err.data = data;\n        return cb(err);\n      } else {\n        console.error('\\x1b[31mError\\x1b[0m: The environment you requested was unavailable.\\n');\n        console.error('\\x1b[33mReason\\x1b[0m:\\n');\n        console.error(data);\n        console.error('\\nFor the available values please consult the WebDriver JSONWireProtocol,');\n        console.error('located at: \\x1b[33mhttp://code.google.com/p/selenium/wiki/JsonWireProtocol#/session\\x1b[0m');\n      }\n    }\n  });\n}; // standard jsonwire call\n\n\nWebdriver.prototype._jsonWireCall = function (opts) {\n  var _this = this; // http options init\n\n\n  var httpOpts = httpUtils.newHttpOpts(opts.method, this._httpConfig);\n  var url = httpUtils.buildJsonCallUrl(this.noAuthConfigUrl, this.sessionID, opts.relPath, opts.absPath); // building callback\n\n  var cb = opts.cb;\n\n  if (opts.emit) {\n    // wrapping cb if we need to emit a message\n    var _cb = cb;\n\n    cb = function cb() {\n      var args = __slice.call(arguments, 0);\n\n      _this.emit(opts.emit.event, opts.emit.message);\n\n      if (_cb) {\n        _cb.apply(_this, args);\n      }\n    };\n  } // logging\n\n\n  httpUtils.emit(this, httpOpts.method, url, opts.data); // writting data\n\n  var data = opts.data || {};\n  httpOpts.prepareToSend(url, data); // building request\n\n  httpUtils.requestWithRetry(httpOpts, this._httpConfig, this.emit.bind(this), function (err, res, data) {\n    if (err) {\n      return cb(err);\n    }\n\n    data = strip(data);\n    cb(null, data || \"\");\n  });\n};\n\nWebdriver.prototype._sauceJobUpdate = function (jsonData, done) {\n  var _this = this;\n\n  if (!this.configUrl || !this.configUrl.auth) {\n    return done(new Error(\"Missing auth token.\"));\n  } else if (!this.configUrl.auth.match(/^.+:.+$/)) {\n    return done(new Error(\"Invalid auth token.\"));\n  }\n\n  var jobUpdateUrl = url.resolve(this.sauceRestRoot.replace(/\\/?$/, '/'), this.configUrl.auth.replace(/:.*$/, '') + '/jobs/' + this.sessionID);\n  var httpOpts = httpUtils.newHttpOpts('PUT', this._httpConfig);\n  httpOpts.auth = {\n    user: this.configUrl.auth.split(':')[0],\n    pass: this.configUrl.auth.split(':')[1]\n  };\n  httpOpts.jar = false; // disable cookies: avoids CSRF issues\n\n  httpOpts.prepareToSend(jobUpdateUrl, jsonData);\n  httpUtils.requestWithoutRetry(httpOpts, this.emit.bind(this), function (err, resp) {\n    if (err) {\n      return done(err);\n    }\n\n    if (resp.statusCode !== 200) {\n      return done(new Error(\"Sauce job update failed with http status code:\" + resp.statusCode));\n    }\n\n    httpUtils.emit(_this, 'POST', '/rest/v1/:user/jobs/:sessionID', jsonData);\n    done();\n  });\n};\n\n_(commands).each(function (fn, name) {\n  Webdriver.prototype[name] = function () {\n    var _this = this;\n\n    var fargs = utils.varargs(arguments);\n    this.emit('command', \"CALL\", name + niceArgs(fargs.all));\n\n    var cb = function cb(err) {\n      if (err) {\n        err.message = '[' + name + niceArgs(fargs.all) + \"] \" + err.message;\n\n        if (fargs.callback) {\n          fargs.callback(err);\n        }\n      } else {\n        var cbArgs = __slice.call(arguments, 0);\n\n        _this.emit('command', \"RESPONSE\", name + niceArgs(fargs.all), niceResp(_.drop(cbArgs)));\n\n        if (fargs.callback) {\n          fargs.callback.apply(null, cbArgs);\n        }\n      }\n    };\n\n    var args = fargs.all.concat([cb]);\n    return fn.apply(this, args);\n  };\n});","map":null,"metadata":{},"sourceType":"script"}