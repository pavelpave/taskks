{"ast":null,"code":"var pathPlatform = require('path-platform');\n\nmodule.exports = function (cwd, opts) {\n  if (cwd === undefined) cwd = process.cwd();\n  if (!opts) opts = {};\n  var platform = opts.platform || process.platform;\n  var isWindows = /^win/.test(platform);\n  var path = isWindows ? pathPlatform.win32 : pathPlatform;\n  var normalize = !isWindows ? path.normalize : path.normalize('c:') === 'c:.' ? fixNormalize(path.normalize) : path.normalize;\n  var sep = isWindows ? /[\\\\\\/]/ : '/';\n  var init = isWindows ? '' : '/';\n\n  var join = function join(x, y) {\n    var ps = [x, y].filter(function (p) {\n      return p && typeof p === 'string';\n    });\n    return normalize(ps.join(isWindows ? '\\\\' : '/'));\n  };\n\n  var res = normalize(cwd).split(sep).reduce(function (acc, dir, ix) {\n    return acc.concat(join(acc[ix], dir));\n  }, [init]).slice(1).reverse();\n  if (res[0] === res[1]) return [res[0]];\n\n  if (isWindows && /^\\\\/.test(cwd)) {\n    return res.slice(0, -1).map(function (d) {\n      var ch = d.charAt(0);\n      return ch === '\\\\' ? d : ch === '.' ? '\\\\' + d.slice(1) : '\\\\' + d;\n    });\n  }\n\n  return res;\n\n  function fixNormalize(fn) {\n    return function (p) {\n      return fn(p).replace(/:\\.$/, ':');\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"script"}