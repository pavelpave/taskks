{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar inspect = require('util').inspect;\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + inspect(path));\n  }\n}\n\nfunction posix(path) {\n  assertPath(path);\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47\n  /*/*/\n  ;\n  var end = -1;\n  var matchedSlash = true;\n\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n\n    if (code === 47\n    /*/*/\n    ) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) return '//';\n  return path.slice(0, end);\n}\n\nfunction win32(path) {\n  assertPath(path);\n  var len = path.length;\n  if (len === 0) return '.';\n  var rootEnd = -1;\n  var end = -1;\n  var matchedSlash = true;\n  var offset = 0;\n  var code = path.charCodeAt(0); // Try to match a root\n\n  if (len > 1) {\n    if (code === 47\n    /*/*/\n    || code === 92\n    /*\\*/\n    ) {\n        // Possible UNC root\n        rootEnd = offset = 1;\n        code = path.charCodeAt(1);\n\n        if (code === 47\n        /*/*/\n        || code === 92\n        /*\\*/\n        ) {\n            // Matched double path separator at beginning\n            var j = 2;\n            var last = j; // Match 1 or more non-path separators\n\n            for (; j < len; ++j) {\n              code = path.charCodeAt(j);\n              if (code === 47\n              /*/*/\n              || code === 92\n              /*\\*/\n              ) break;\n            }\n\n            if (j < len && j !== last) {\n              // Matched!\n              last = j; // Match 1 or more path separators\n\n              for (; j < len; ++j) {\n                code = path.charCodeAt(j);\n                if (code !== 47\n                /*/*/\n                && code !== 92\n                /*\\*/\n                ) break;\n              }\n\n              if (j < len && j !== last) {\n                // Matched!\n                last = j; // Match 1 or more non-path separators\n\n                for (; j < len; ++j) {\n                  code = path.charCodeAt(j);\n                  if (code === 47\n                  /*/*/\n                  || code === 92\n                  /*\\*/\n                  ) break;\n                }\n\n                if (j === len) {\n                  // We matched a UNC root only\n                  return path;\n                }\n\n                if (j !== last) {\n                  // We matched a UNC root with leftovers\n                  // Offset by 1 to include the separator after the UNC root to\n                  // treat it as a \"normal root\" on top of a (UNC) root\n                  rootEnd = offset = j + 1;\n                }\n              }\n            }\n          }\n      } else if (code >= 65\n    /*A*/\n    && code <= 90\n    /*Z*/\n    || code >= 97\n    /*a*/\n    && code <= 122\n    /*z*/\n    ) {\n      // Possible device root\n      code = path.charCodeAt(1);\n\n      if (path.charCodeAt(1) === 58\n      /*:*/\n      ) {\n          rootEnd = offset = 2;\n\n          if (len > 2) {\n            code = path.charCodeAt(2);\n            if (code === 47\n            /*/*/\n            || code === 92\n            /*\\*/\n            ) rootEnd = offset = 3;\n          }\n        }\n    }\n  } else if (code === 47\n  /*/*/\n  || code === 92\n  /*\\*/\n  ) {\n      return path[0];\n    }\n\n  for (var i = len - 1; i >= offset; --i) {\n    code = path.charCodeAt(i);\n\n    if (code === 47\n    /*/*/\n    || code === 92\n    /*\\*/\n    ) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) {\n    if (rootEnd === -1) return '.';else end = rootEnd;\n  }\n\n  return path.slice(0, end);\n}\n\nmodule.exports = process.platform === 'win32' ? win32 : posix;\nmodule.exports.posix = posix;\nmodule.exports.win32 = win32;","map":null,"metadata":{},"sourceType":"script"}