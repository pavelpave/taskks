{"ast":null,"code":"// inspired by https://github.com/raszi/node-tmp, but only\n// provides tmp paths.\nvar fs = require('fs'),\n    path = require('path'),\n    os = require('os'),\n    utils = require('./utils');\n\nfunction _isUndefined(obj) {\n  return typeof obj === 'undefined';\n}\n\nfunction _parseArguments() {\n  var fargs = utils.varargs(arguments);\n  var callback = fargs.callback;\n  var options = fargs.all[0];\n  return [options, callback];\n}\n/**\n * Gets the temp directory.\n *\n * @return {String}\n * @api private\n */\n\n\nfunction _getTMPDir() {\n  var tmpNames = ['TMPDIR', 'TMP', 'TEMP'];\n\n  for (var i = 0, length = tmpNames.length; i < length; i++) {\n    if (_isUndefined(process.env[tmpNames[i]])) {\n      continue;\n    }\n\n    return process.env[tmpNames[i]];\n  } // fallback to the default\n\n\n  return '/tmp';\n}\n\nvar exists = fs.exists || path.exists,\n    tmpDir = os.tmpdir || os.tmpDir || _getTMPDir,\n    _TMP = tmpDir(),\n    randomChars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz\",\n    randomCharsLength = randomChars.length;\n/**\n * Gets a temporary file name.\n *\n * @param {Object} opts\n * @param {Function} cb\n * @api private\n */\n\n\nfunction _getTmpName(options, callback) {\n  var args = _parseArguments(options, callback),\n      opts = args[0],\n      cb = args[1],\n      template = opts.template,\n      templateDefined = !_isUndefined(template),\n      tries = opts.tries || 3;\n\n  if (isNaN(tries) || tries < 0) {\n    return cb(new Error('Invalid tries'));\n  }\n\n  if (templateDefined && !template.match(/XXXXXX/)) {\n    return cb(new Error('Invalid template provided'));\n  }\n\n  function _getName() {\n    // prefix and postfix\n    if (!templateDefined) {\n      var name = [_isUndefined(opts.prefix) ? 'tmp-' : opts.prefix, process.pid, (Math.random() * 0x1000000000).toString(36), opts.postfix].join('');\n      return path.join(opts.dir || _TMP, name);\n    } // mkstemps like template\n\n\n    var chars = [];\n\n    for (var i = 0; i < 6; i++) {\n      chars.push(randomChars.substr(Math.floor(Math.random() * randomCharsLength), 1));\n    }\n\n    return template.replace(/XXXXXX/, chars.join(''));\n  }\n\n  (function _getUniqueName() {\n    var name = _getName(); // check whether the path exists then retry if needed\n\n\n    exists(name, function _pathExists(pathExists) {\n      if (pathExists) {\n        if (tries-- > 0) {\n          return _getUniqueName();\n        }\n\n        return cb(new Error('Could not get a unique tmp filename, max tries reached'));\n      }\n\n      cb(null, name);\n    });\n  })();\n} // exporting all the needed methods\n\n\nmodule.exports.tmpdir = _TMP;\nmodule.exports.tmpName = _getTmpName;","map":null,"metadata":{},"sourceType":"script"}