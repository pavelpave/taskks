{"ast":null,"code":"var util = require('util');\n\nvar PassThrough = require('readable-stream/passthrough');\n\nmodule.exports = {\n  Readable: Readable,\n  Writable: Writable\n};\nutil.inherits(Readable, PassThrough);\nutil.inherits(Writable, PassThrough); // Patch the given method of instance so that the callback\n// is executed once, before the actual method is called the\n// first time.\n\nfunction beforeFirstCall(instance, method, callback) {\n  instance[method] = function () {\n    delete instance[method];\n    callback.apply(this, arguments);\n    return this[method].apply(this, arguments);\n  };\n}\n\nfunction Readable(fn, options) {\n  if (!(this instanceof Readable)) return new Readable(fn, options);\n  PassThrough.call(this, options);\n  beforeFirstCall(this, '_read', function () {\n    var source = fn.call(this, options);\n    var emit = this.emit.bind(this, 'error');\n    source.on('error', emit);\n    source.pipe(this);\n  });\n  this.emit('readable');\n}\n\nfunction Writable(fn, options) {\n  if (!(this instanceof Writable)) return new Writable(fn, options);\n  PassThrough.call(this, options);\n  beforeFirstCall(this, '_write', function () {\n    var destination = fn.call(this, options);\n    var emit = this.emit.bind(this, 'error');\n    destination.on('error', emit);\n    this.pipe(destination);\n  });\n  this.emit('writable');\n}","map":null,"metadata":{},"sourceType":"script"}