{"ast":null,"code":"var _ = require('lodash');\n\nvar __slice = Array.prototype.slice;\n\nvar utils = require(\"./utils\");\n\nvar deprecator = utils.deprecator;\n\nfunction Asserter(_assert) {\n  this.assert = _assert;\n}\n/**\n * asserters.nonEmptyText\n *\n * @asserter\n */\n\n\nvar nonEmptyText = new Asserter(function (target, cb) {\n  target.text(function (err, text) {\n    if (err) {\n      return cb(err);\n    }\n\n    var satisfied = text && _(text).trim().length > 0;\n    cb(null, satisfied, satisfied ? text : undefined);\n  });\n});\n/**\n * asserters.textInclude(content) -> Asserter\n *\n * @asserter\n */\n\nfunction textInclude(content) {\n  return new Asserter(function (target, cb) {\n    target.text(function (err, text) {\n      if (err) {\n        return cb(err);\n      }\n\n      var satisfied = text && _(text).includes(content);\n\n      cb(null, satisfied, satisfied ? text : undefined);\n    });\n  });\n}\n/**\n * asserters.isVisible\n *\n * @asserter\n */\n\n\nvar isDisplayed = new Asserter(function (el, cb) {\n  el.isDisplayed(function (err, displayed) {\n    if (err) {\n      return cb(err);\n    }\n\n    cb(null, displayed);\n  });\n});\nvar isVisible = new Asserter(function () {\n  deprecator.warn('isVisible asserter', 'isVisible asserter has been deprecated, use isDisplayed asserter instead.');\n\n  var args = __slice.call(arguments, 0);\n\n  isDisplayed.assert.apply(this, args);\n});\n/**\n * asserters.isHidden\n *\n * @asserter\n */\n\nvar isNotDisplayed = new Asserter(function (el, cb) {\n  el.isDisplayed(function (err, displayed) {\n    if (err) {\n      return cb(err);\n    }\n\n    cb(null, !displayed);\n  });\n});\nvar isHidden = new Asserter(function () {\n  deprecator.warn('isHidden asserter', 'isHidden asserter has been deprecated, use isNotDisplayed asserter instead.');\n\n  var args = __slice.call(arguments, 0);\n\n  isNotDisplayed.assert.apply(this, args);\n});\n/**\n * asserters.jsCondition(jsConditionExpr) -> Asserter\n * jsConditionExpr: js script expression, should evaluate as boolean.\n *\n * @asserter\n */\n\nfunction jsCondition(jsConditionExpr, safe) {\n  // jshint evil: true\n  if (safe === undefined) {\n    safe = false;\n  }\n\n  return new Asserter(function (browser, cb) {\n    var _eval = safe ? browser.safeEval : browser.eval;\n\n    _eval.apply(browser, [jsConditionExpr, function (err, res) {\n      if (err) {\n        return cb(err);\n      }\n\n      cb(null, res, res);\n    }]);\n  });\n}\n\nmodule.exports = {\n  Asserter: Asserter,\n  nonEmptyText: nonEmptyText,\n  isDisplayed: isDisplayed,\n  isNotDisplayed: isNotDisplayed,\n  textInclude: textInclude,\n  jsCondition: jsCondition,\n  // deprecated\n  isVisible: isVisible,\n  isHidden: isHidden\n};","map":null,"metadata":{},"sourceType":"script"}