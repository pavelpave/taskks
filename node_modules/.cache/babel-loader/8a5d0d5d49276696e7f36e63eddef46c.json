{"ast":null,"code":"var __slice = Array.prototype.slice,\n    _ = require('lodash'),\n    Webdriver = require('./webdriver'),\n    Element = require('./element');\n/**\n * new wd.TouchAction()\n * TouchAction constructor\n *\n * @actions\n */\n\n\nvar TouchAction = function TouchAction(driver) {\n  this.driver = driver;\n  this.gestures = [];\n};\n\nTouchAction.prototype.addGesture = function (action, opts) {\n  opts = opts || {};\n  var el = opts.element || opts.el;\n\n  if (el && !(el instanceof Element)) {\n    throw new Error('Invalid element or el field passed');\n  } // preparing opts\n\n\n  var finalOpts = {};\n\n  _(opts).each(function (value, name) {\n    if (_.isNumber(value)) {\n      finalOpts[name] = value;\n    } else if (value instanceof Element) {\n      finalOpts[name] = value.value;\n    } else if (value) {\n      finalOpts[name] = value;\n    }\n  });\n\n  if (finalOpts.el) {\n    finalOpts.element = finalOpts.el;\n    delete finalOpts.el;\n  } // adding action\n\n\n  this.gestures.push({\n    action: action,\n    options: finalOpts\n  });\n};\n\nTouchAction.prototype.toJSON = function () {\n  return this.gestures;\n};\n/**\n * touchAction.longPress({el, x, y})\n * pass el or (x,y) or both\n *\n * @actions\n */\n\n\nTouchAction.prototype.longPress = function (opts) {\n  this.addGesture('longPress', opts);\n  return this;\n};\n/**\n * touchAction.moveTo({el, x, y})\n * pass el or (x,y) or both\n *\n * @actions\n */\n\n\nTouchAction.prototype.moveTo = function (opts) {\n  this.addGesture('moveTo', opts);\n  return this;\n};\n/**\n * touchAction.press({el, x, y})\n * pass el or (x,y) or both\n *\n * @actions\n */\n\n\nTouchAction.prototype.press = function (opts) {\n  this.addGesture('press', opts);\n  return this;\n};\n/**\n * touchAction.release()\n *\n * @actions\n */\n\n\nTouchAction.prototype.release = function () {\n  this.addGesture('release', {});\n  return this;\n};\n/**\n * touchAction.tap({el, x, y, count})\n * pass el or (x,y) or both\n * count is optional\n *\n * @actions\n */\n\n\nTouchAction.prototype.tap = function (opts) {\n  this.addGesture('tap', opts);\n  return this;\n};\n/**\n * touchAction.wait({ms})\n * touchAction.wait(ms)\n * ms is optional\n *\n * @actions\n */\n\n\nTouchAction.prototype.wait = function (opts) {\n  if (_.isNumber(opts)) {\n    opts = {\n      ms: opts\n    };\n  }\n\n  this.addGesture('wait', opts);\n  return this;\n};\n/**\n * cancel the action\n *\n * @actions\n */\n\n\nTouchAction.prototype.cancel = function () {\n  this.gestures = [];\n};\n/**\n * perform the action\n *\n * @actions\n */\n\n\nTouchAction.prototype.perform = function (cb) {\n  if (typeof cb === 'function') {\n    this.driver.performTouchAction(this, cb);\n  } else {\n    return this.driver.performTouchAction(this);\n  }\n};\n/**\n * new wd.MultiAction()\n * MultiAction constructor\n *\n * @actions\n */\n\n\nvar MultiAction = function MultiAction(browserOrElement) {\n  if (browserOrElement instanceof Element) {\n    this.element = browserOrElement;\n    this.browser = this.element.browser;\n  } else if (browserOrElement instanceof Webdriver) {\n    this.browser = browserOrElement;\n  }\n\n  this.actions = [];\n};\n\nMultiAction.prototype.toJSON = function () {\n  var output = {};\n\n  if (this.element) {\n    output.elementId = this.element.value;\n  }\n\n  output.actions = _(this.actions).map(function (action) {\n    return action.toJSON();\n  }).value();\n  return output;\n};\n/**\n * multiAction.add(touchAction)\n *\n * @actions\n */\n\n\nMultiAction.prototype.add = function () {\n  var actions = __slice.call(arguments, 0);\n\n  this.actions = this.actions.concat(actions);\n  return this;\n};\n/**\n * multiAction.cancel()\n *\n * @actions\n */\n\n\nMultiAction.prototype.cancel = function () {\n  this.actions = [];\n};\n/**\n * multiAction.perform()\n *\n * @actions\n */\n\n\nMultiAction.prototype.perform = function (cb) {\n  if (typeof cb === 'function') {\n    if (this.element) {\n      this.element.performMultiAction(this, cb);\n    } else {\n      this.browser.performMultiAction(this, cb);\n    }\n  } else {\n    if (this.element) {\n      return this.element.performMultiAction(this);\n    } else {\n      return this.browser.performMultiAction(this);\n    }\n  }\n};\n/**\n * new InputDevice({type?, id?})\n * \n * type is either pointer, key, or none (default is 'none')\n */\n\n\nvar InputDevice = function InputDevice(opts) {\n  opts = opts || {};\n  this.type = opts.type || \"none\";\n  this.id = opts.id;\n\n  if (this.type === \"pointer\") {\n    if (opts.pointerType) {\n      this.parameters = {};\n      this.parameters.pointerType = opts.pointerType;\n    } else if (_.isObject(opts.parameters)) {\n      this.parameters = opts.parameters;\n    } else {\n      // Defaults to 'touch' because\n      this.parameters = {\n        pointerType: 'touch'\n      };\n    }\n  }\n\n  this.actions = [];\n};\n\nInputDevice.ACTION_TYPES = {\n  KEY: \"key\",\n  POINTER: \"pointer\",\n  NONE: \"none\"\n}; // Map special keys to unicode characters\n\nInputDevice.KEYS = {\n  \"UNIDENTIFIED\": \"\\uE000\",\n  \"CANCEL\": \"\\uE001\",\n  \"HELP\": \"\\uE002\",\n  \"BACKSPACCE\": \"\\uE003\",\n  \"TAB\": \"\\uE004\",\n  \"CLEAR\": \"\\uE005\",\n  \"RETURN\": \"\\uE006\",\n  \"ENTER\": \"\\uE007\",\n  \"SHIFT\": \"\\uE008\",\n  \"CONTROL\": \"\\uE009\",\n  \"ALT\": \"\\uE00A\",\n  \"PAUSE\": \"\\uE00B\",\n  \"ESCAPE\": \"\\uE00C\",\n  \"WHITESPACE\": \"\\uE00D\",\n  \"PAGE_UP\": \"\\uE00E\",\n  \"PAGE_DOWN\": \"\\uE00F\",\n  \"END\": \"\\uE010\",\n  \"HOME\": \"\\uE011\",\n  \"ARROW_LEFT\": \"\\uE012\",\n  \"ARROW_UP\": \"\\uE013\",\n  \"ARROW_RIGHT\": \"\\uE014\",\n  \"ARROW_DOWN\": \"\\uE015\",\n  \"INSERT\": \"\\uE016\",\n  \"DELETE\": \"\\uE017\",\n  \";\": \"\\uE018\",\n  \"=\": \"\\uE019\",\n  \"0\": \"\\uE01A\",\n  \"1\": \"\\uE01B\",\n  \"2\": \"\\uE01C\",\n  \"3\": \"\\uE01D\",\n  \"4\": \"\\uE01E\",\n  \"5\": \"\\uE01F\",\n  \"6\": \"\\uE020\",\n  \"7\": \"\\uE021\",\n  \"8\": \"\\uE022\",\n  \"9\": \"\\uE023\",\n  \"*\": \"\\uE024\",\n  \"+\": \"\\uE025\",\n  \",\": \"\\uE026\",\n  \"-\": \"\\uE027\",\n  \".\": \"\\uE028\",\n  \"/\": \"\\uE029\",\n  \"F1\": \"\\uE031\",\n  \"F2\": \"\\uE032\",\n  \"F3\": \"\\uE033\",\n  \"F4\": \"\\uE034\",\n  \"F5\": \"\\uE035\",\n  \"F6\": \"\\uE036\",\n  \"F7\": \"\\uE037\",\n  \"F8\": \"\\uE038\",\n  \"F9\": \"\\uE039\",\n  \"F10\": \"\\uE03A\",\n  \"F11\": \"\\uE03B\",\n  \"F12\": \"\\uE03C\",\n  \"META\": \"\\uE03D\",\n  \"ZENKAKU_HANKAKU\": \"\\uE040\"\n};\n\nInputDevice.prototype.addAction = function (actionType, opts) {\n  // preparing opts\n  var finalOpts = {};\n\n  _(opts).each(function (value, name) {\n    if (_.isNumber(value)) {\n      finalOpts[name] = value;\n    } else if (value instanceof Element) {\n      finalOpts[name] = value.value;\n    } else if (value) {\n      finalOpts[name] = value;\n    }\n  });\n\n  this.actions.push(Object.assign({\n    type: actionType\n  }, finalOpts));\n};\n/**\n * pause(duration)\n * \n * Pause this input source for a duration (in ms)\n * \n * value is a string containing a single Unicode code point (any value in the Unicode code space)\n * \n * @actions\n */\n\n\nInputDevice.prototype.pause = function (opts) {\n  var duration = _.isNumber(opts) ? opts : opts.duration;\n  this.addAction(\"pause\", {\n    duration: duration\n  });\n};\n/**\n * keyDown({value})\n * \n * Press a key.\n * \n * value is a string containing a single Unicode code point (any value in the Unicode code space)\n * \n * @actions\n */\n\n\nInputDevice.prototype.keyDown = function (opts) {\n  return this.keyPressEvent(\"keyDown\", opts);\n};\n/**\n * keyUp({value})\n * \n * Release a key press.\n * \n * value is a string containing a single Unicode code point (any value in the Unicode code space)\n * \n * @actions\n */\n\n\nInputDevice.prototype.keyUp = function (opts) {\n  return this.keyPressEvent(\"keyUp\", opts);\n};\n\nInputDevice.prototype.keyPressEvent = function (type, opts) {\n  opts = opts || {};\n\n  if (_.isString(opts)) {\n    opts = {\n      value: opts\n    };\n  }\n\n  this.addAction(type, opts);\n  return this;\n};\n/**\n * pointerDown({button})\n * \n * Depress a pointer button. Defaults to 0.\n * \n * @actions \n */\n\n\nInputDevice.prototype.pointerDown = function (opts) {\n  return this.pointerButtonAction(\"pointerDown\", opts);\n};\n/**\n * pointerUp({button})\n * \n * Release a pointer button. Defaults to 0.\n * \n * @actions\n */\n\n\nInputDevice.prototype.pointerUp = function (opts) {\n  return this.pointerButtonAction(\"pointerUp\", opts);\n};\n\nInputDevice.prototype.pointerButtonAction = function (type, opts) {\n  opts = opts || {};\n\n  if (_.isNumber(opts)) {\n    opts = {\n      button: opts\n    };\n  } else if (_.isNil(opts.button)) {\n    opts.button = 0;\n  }\n\n  this.addAction(type, opts);\n  return this;\n};\n\nInputDevice.prototype.pointerCancel = function (opts) {\n  this.addAction(\"pointerCancel\", _.defaults(opts, {\n    button: 0\n  }));\n  return this;\n};\n/**\n * pointerMove({el, duration, origin, x, y})\n * \n * * 'origin' must be either viewport or pointer (default is 'viewport'). \n * * If el is set, origin will be that element\n * * 'x, y' Are coordinates relative to the origin\n * * 'duration' is an optional time in ms that determines how long the movement takes (default 0)\n * \n * @param {*} opts \n */\n\n\nInputDevice.prototype.pointerMove = function (opts) {\n  opts = opts || {};\n  var el = opts.el || opts.element;\n\n  if (el && !(el instanceof Element)) {\n    throw new Error('Invalid element or el field passed');\n  }\n\n  if (el instanceof Element) {\n    opts.origin = {\n      \"element-6066-11e4-a52e-4f735466cecf\": el.value\n    };\n  }\n\n  this.addAction(\"pointerMove\", opts);\n};\n\nInputDevice.prototype.toJSON = function () {\n  return _.omitBy(this, _.isFunction);\n};\n\nvar W3CActions = function W3CActions(driver) {\n  this.driver = driver;\n  this.touchCount = 1;\n  this.inputs = {};\n};\n/**\n * w3cActions.addInputDevice(inputSource)\n *\n * @actions\n */\n\n\nW3CActions.prototype.addInputDevice = function (inputSource) {\n  if (_.isNil(inputSource.id)) {\n    if (inputSource.type === \"pointer\") {\n      var pointerType = inputSource.parameters.pointerType;\n\n      if (pointerType === \"touch\") {\n        inputSource.id = \"finger\" + this.touchCount; // finger1, finger2, etc... for multi touch\n\n        this.touchCount++;\n      } else if (pointerType === \"mouse\") {\n        inputSource.id = \"default mouse\"; // Same name as what Java client uses\n      } else {\n        inputSource.id = pointerType;\n      }\n    } else {\n      inputSource.id = inputSource.type === \"key\" ? \"keyboard\" : inputSource.type;\n    }\n\n    this.inputs[inputSource.id] = new InputDevice(inputSource);\n  }\n\n  return this.inputs[inputSource.id];\n};\n\nW3CActions.prototype.addTouchInput = function () {\n  return this.addInputDevice({\n    type: \"pointer\",\n    parameters: {\n      pointerType: \"touch\"\n    }\n  });\n};\n\nW3CActions.prototype.addMouseInput = function () {\n  return this.addInputDevice({\n    type: \"pointer\",\n    parameters: {\n      pointerType: \"mouse\"\n    }\n  });\n};\n\nW3CActions.prototype.addPenInput = function () {\n  return this.addInputDevice({\n    type: \"pointer\",\n    parameters: {\n      pointerType: \"pen\"\n    }\n  });\n};\n\nW3CActions.prototype.addKeyInput = function () {\n  return this.addInputDevice({\n    type: \"key\"\n  });\n};\n/**\n * multiAction.perform()\n *\n * @actions\n */\n\n\nW3CActions.prototype.perform = function (cb) {\n  if (typeof cb === 'function') {\n    return this.driver.performW3CActions(this, cb);\n  } else {\n    return this.driver.performW3CActions(this);\n  }\n};\n\nW3CActions.prototype.toJSON = function () {\n  var actions = _.values(this.inputs, function (input) {\n    input.toJSON();\n  });\n\n  return {\n    actions: actions\n  };\n};\n\nmodule.exports = {\n  TouchAction: TouchAction,\n  MultiAction: MultiAction,\n  InputDevice: InputDevice,\n  W3CActions: W3CActions\n};","map":null,"metadata":{},"sourceType":"script"}