{"ast":null,"code":"/* Generated by `npm run build`, do not edit! */\n\"use strict\";\n\nvar acorn = require(\"acorn\");\n\nvar tt = acorn.tokTypes;\nvar isIdentifierStart = acorn.isIdentifierStart;\n\nmodule.exports = function (Parser) {\n  return (\n    /*@__PURE__*/\n    function (Parser) {\n      function anonymous() {\n        Parser.apply(this, arguments);\n      }\n\n      if (Parser) anonymous.__proto__ = Parser;\n      anonymous.prototype = Object.create(Parser && Parser.prototype);\n      anonymous.prototype.constructor = anonymous;\n\n      anonymous.prototype.parseLiteral = function parseLiteral(value) {\n        var node = Parser.prototype.parseLiteral.call(this, value);\n\n        if (node.raw.charCodeAt(node.raw.length - 1) == 110) {\n          node.bigint = node.raw;\n        }\n\n        return node;\n      };\n\n      anonymous.prototype.readRadixNumber = function readRadixNumber(radix) {\n        var start = this.pos;\n        this.pos += 2; // 0x\n\n        var val = this.readInt(radix);\n\n        if (val === null) {\n          this.raise(this.start + 2, \"Expected number in radix \" + radix);\n        }\n\n        if (this.input.charCodeAt(this.pos) == 110) {\n          var str = this.input.slice(start, this.pos);\n          val = typeof BigInt !== \"undefined\" ? BigInt(str) : null;\n          ++this.pos;\n        } else if (isIdentifierStart(this.fullCharCodeAtPos())) {\n          this.raise(this.pos, \"Identifier directly after number\");\n        }\n\n        return this.finishToken(tt.num, val);\n      };\n\n      anonymous.prototype.readNumber = function readNumber(startsWithDot) {\n        var start = this.pos; // Not an int\n\n        if (startsWithDot) {\n          return Parser.prototype.readNumber.call(this, startsWithDot);\n        } // Legacy octal\n\n\n        if (this.input.charCodeAt(start) === 48 && this.input.charCodeAt(start + 1) !== 110) {\n          return Parser.prototype.readNumber.call(this, startsWithDot);\n        }\n\n        if (this.readInt(10) === null) {\n          this.raise(start, \"Invalid number\");\n        } // Not a BigInt, reset and parse again\n\n\n        if (this.input.charCodeAt(this.pos) != 110) {\n          this.pos = start;\n          return Parser.prototype.readNumber.call(this, startsWithDot);\n        }\n\n        var str = this.input.slice(start, this.pos);\n        var val = typeof BigInt !== \"undefined\" ? BigInt(str) : null;\n        ++this.pos;\n        return this.finishToken(tt.num, val);\n      };\n\n      return anonymous;\n    }(Parser)\n  );\n};","map":null,"metadata":{},"sourceType":"script"}