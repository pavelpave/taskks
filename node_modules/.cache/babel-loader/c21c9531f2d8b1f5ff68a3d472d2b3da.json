{"ast":null,"code":"var aparse = require('acorn-node').parse;\n\nfunction parse(src, opts) {\n  if (!opts) opts = {};\n  return aparse(src, opts);\n}\n\nmodule.exports = function (src, file, opts) {\n  if (typeof src !== 'string') src = String(src);\n\n  try {\n    eval('throw \"STOP\"; (function () { ' + src + '\\n})()');\n    return;\n  } catch (err) {\n    if (err === 'STOP') return undefined;\n    if (err.constructor.name !== 'SyntaxError') return err;\n    return errorInfo(src, file, opts);\n  }\n};\n\nfunction errorInfo(src, file, opts) {\n  try {\n    parse(src, opts);\n  } catch (err) {\n    return new ParseError(err, src, file);\n  }\n\n  return undefined;\n}\n\nfunction ParseError(err, src, file) {\n  SyntaxError.call(this);\n  this.message = err.message.replace(/\\s+\\(\\d+:\\d+\\)$/, '');\n  this.line = err.loc.line;\n  this.column = err.loc.column + 1;\n  this.annotated = '\\n' + (file || '(anonymous file)') + ':' + this.line + '\\n' + src.split('\\n')[this.line - 1] + '\\n' + Array(this.column).join(' ') + '^' + '\\n' + 'ParseError: ' + this.message;\n}\n\nParseError.prototype = Object.create(SyntaxError.prototype);\n\nParseError.prototype.toString = function () {\n  return this.annotated;\n};\n\nParseError.prototype.inspect = function () {\n  return this.annotated;\n};","map":null,"metadata":{},"sourceType":"script"}