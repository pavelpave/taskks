{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar convert = require('convert-source-map');\n\nvar memoize = require('lodash.memoize');\n\nvar createGenerator = require('inline-source-map');\n\nvar pathIsAbsolute = require('./lib/path-is-absolute');\n\nvar mappingsFromMap = require('./lib/mappings-from-map');\n\nvar protocolRx = /^[a-z]+:\\/\\//;\n/**\n * Rebases a relative path in 'sourceFile' to be relative\n * to the path where 'sourceFile' is located.\n *\n * This is necessary before adding relative paths to the\n * new combined map to ensure all paths are relative to their\n * original source.\n *\n * The 'sourceRoot' from the original source map is joined\n * as well to ensure the complete path.\n *\n * Resulting paths that are absolute are passed along directly.\n *\n * @param sourceFile {String} path to the original source file that references a map\n * @param relativeRoot {String} sourceRoot in sourceFile's map to combine with relativePath\n * @param relativePath {String} source path from sourceFile's map\n */\n\nvar rebaseRelativePath = memoize(function (sourceFile, relativeRoot, relativePath) {\n  if (!relativePath) {\n    return relativePath;\n  } // join relative path to root (e.g. 'src/' + 'file.js')\n\n\n  var relativeRootedPath = relativeRoot ? path.join(relativeRoot, relativePath) : relativePath;\n  relativeRootedPath = relativeRootedPath.replace(/\\\\/g, '/');\n  sourceFile = sourceFile.replace(/\\\\/g, '/');\n\n  if (sourceFile === relativeRootedPath || // same path,\n  pathIsAbsolute(relativeRootedPath) || // absolute path, nor\n  protocolRx.test(relativeRootedPath)) {\n    // absolute protocol need rebasing\n    return relativeRootedPath;\n  } // make relative to source file\n\n\n  return path.join(path.dirname(sourceFile), relativeRootedPath).replace(/\\\\/g, '/');\n}, function (a, b, c) {\n  return a + '::' + b + '::' + c;\n});\n\nfunction resolveMap(source) {\n  var gen = convert.fromSource(source);\n  return gen ? gen.toObject() : null;\n}\n\nfunction hasInlinedSource(existingMap) {\n  return existingMap.sourcesContent && !!existingMap.sourcesContent[0];\n}\n\nfunction Combiner(file, sourceRoot) {\n  // since we include the original code in the map sourceRoot actually not needed\n  this.generator = createGenerator({\n    file: file || 'generated.js',\n    sourceRoot: sourceRoot\n  });\n}\n\nCombiner.prototype._addGeneratedMap = function (sourceFile, source, offset) {\n  this.generator.addGeneratedMappings(sourceFile, source, offset);\n  this.generator.addSourceContent(sourceFile, source);\n  return this;\n};\n\nCombiner.prototype._addExistingMap = function (sourceFile, source, existingMap, offset) {\n  var mappings = mappingsFromMap(existingMap); // add all of the sources from the map\n\n  for (var i = 0, len = existingMap.sources.length; i < len; i++) {\n    if (!existingMap.sourcesContent) continue;\n    this.generator.addSourceContent(rebaseRelativePath(sourceFile, existingMap.sourceRoot, existingMap.sources[i]), existingMap.sourcesContent[i]);\n  } // add the mappings, preserving the original mapping 'source'\n\n\n  mappings.forEach(function (mapping) {\n    // Add the mappings one at a time because 'inline-source-map' doesn't handle\n    // mapping source filenames. The mapping.source already takes sourceRoot into account\n    // per the SMConsumer.eachMapping function, so pass null for the root here.\n    this.generator.addMappings(rebaseRelativePath(sourceFile, null, mapping.source), [mapping], offset);\n  }, this);\n  return this;\n};\n/**\n * Adds map to underlying source map.\n * If source contains a source map comment that has the source of the original file inlined it will offset these\n * mappings and include them.\n * If no source map comment is found or it has no source inlined, mappings for the file will be generated and included\n *\n * @name addMap\n * @function\n * @param opts {Object} { sourceFile: {String}, source: {String} }\n * @param offset {Object} { line: {Number}, column: {Number} }\n */\n\n\nCombiner.prototype.addFile = function (opts, offset) {\n  offset = offset || {};\n  if (!offset.hasOwnProperty('line')) offset.line = 0;\n  if (!offset.hasOwnProperty('column')) offset.column = 0;\n  var existingMap = resolveMap(opts.source);\n  return existingMap && hasInlinedSource(existingMap) ? this._addExistingMap(opts.sourceFile, opts.source, existingMap, offset) : this._addGeneratedMap(opts.sourceFile, opts.source, offset);\n};\n/**\n* @name base64\n* @function\n* @return {String} base64 encoded combined source map\n*/\n\n\nCombiner.prototype.base64 = function () {\n  return this.generator.base64Encode();\n};\n/**\n * @name comment\n * @function\n * @return {String} base64 encoded sourceMappingUrl comment of the combined source map\n */\n\n\nCombiner.prototype.comment = function () {\n  return this.generator.inlineMappingUrl();\n};\n/**\n * @name create\n * @function\n * @param file {String} optional name of the generated file\n * @param sourceRoot {String} optional sourceRoot of the map to be generated\n * @return {Object} Combiner instance to which source maps can be added and later combined\n */\n\n\nexports.create = function (file, sourceRoot) {\n  return new Combiner(file, sourceRoot);\n};\n/**\n * @name removeComments\n * @function\n * @param src\n * @return {String} src with all sourceMappingUrl comments removed\n */\n\n\nexports.removeComments = function (src) {\n  if (!src.replace) return src;\n  return src.replace(convert.commentRegex, '').replace(convert.mapFileCommentRegex, '');\n};","map":null,"metadata":{},"sourceType":"script"}