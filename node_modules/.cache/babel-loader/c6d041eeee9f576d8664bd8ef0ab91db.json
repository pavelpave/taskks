{"ast":null,"code":"var core = require('./core');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar caller = require('./caller.js');\n\nvar nodeModulesPaths = require('./node-modules-paths.js');\n\nvar splitRe = process.platform === 'win32' ? /[\\/\\\\]/ : /\\//;\n\nmodule.exports = function resolve(x, opts, cb) {\n  if (typeof opts === 'function') {\n    cb = opts;\n    opts = {};\n  }\n\n  if (!opts) opts = {};\n\n  if (typeof x !== 'string') {\n    return process.nextTick(function () {\n      cb(new Error('path must be a string'));\n    });\n  }\n\n  var isFile = opts.isFile || function (file, cb) {\n    fs.stat(file, function (err, stat) {\n      if (err && err.code === 'ENOENT') cb(null, false);else if (err) cb(err);else cb(null, stat.isFile() || stat.isFIFO());\n    });\n  };\n\n  var readFile = opts.readFile || fs.readFile;\n  var extensions = opts.extensions || ['.js'];\n  var y = opts.basedir || path.dirname(caller());\n  opts.paths = opts.paths || [];\n\n  if (/^(?:\\.\\.?(?:\\/|$)|\\/|([A-Za-z]:)?[\\\\\\/])/.test(x)) {\n    var res = path.resolve(y, x);\n    if (x === '..') res += '/';\n\n    if (/\\/$/.test(x) && res === y) {\n      loadAsDirectory(res, opts.package, onfile);\n    } else loadAsFile(res, opts.package, onfile);\n  } else loadNodeModules(x, y, function (err, n, pkg) {\n    if (err) cb(err);else if (n) cb(null, n, pkg);else if (core[x]) return cb(null, x);else cb(new Error(\"Cannot find module '\" + x + \"' from '\" + y + \"'\"));\n  });\n\n  function onfile(err, m, pkg) {\n    if (err) cb(err);else if (m) cb(null, m, pkg);else loadAsDirectory(res, function (err, d, pkg) {\n      if (err) cb(err);else if (d) cb(null, d, pkg);else cb(new Error(\"Cannot find module '\" + x + \"' from '\" + y + \"'\"));\n    });\n  }\n\n  function loadAsFile(x, pkg, cb) {\n    if (typeof pkg === 'function') {\n      cb = pkg;\n      pkg = undefined;\n    }\n\n    var exts = [''].concat(extensions);\n    load(exts, x, pkg);\n\n    function load(exts, x, pkg) {\n      if (exts.length === 0) return cb(null, undefined, pkg);\n      var file = x + exts[0];\n      if (pkg) onpkg(null, pkg);else loadpkg(path.dirname(file), onpkg);\n\n      function onpkg(err, pkg_, dir) {\n        pkg = pkg_;\n        if (err) return cb(err);\n\n        if (dir && pkg && opts.pathFilter) {\n          var rfile = path.relative(dir, file);\n          var rel = rfile.slice(0, rfile.length - exts[0].length);\n          var r = opts.pathFilter(pkg, x, rel);\n          if (r) return load([''].concat(extensions.slice()), path.resolve(dir, r), pkg);\n        }\n\n        isFile(file, onex);\n      }\n\n      function onex(err, ex) {\n        if (err) cb(err);else if (!ex) load(exts.slice(1), x, pkg);else cb(null, file, pkg);\n      }\n    }\n  }\n\n  function loadpkg(dir, cb) {\n    if (dir === '' || dir === '/') return cb(null);\n\n    if (process.platform === 'win32' && /^\\w:[\\\\\\/]*$/.test(dir)) {\n      return cb(null);\n    }\n\n    if (/[\\\\\\/]node_modules[\\\\\\/]*$/.test(dir)) return cb(null);\n    var pkgfile = path.join(dir, 'package.json');\n    isFile(pkgfile, function (err, ex) {\n      // on err, ex is false\n      if (!ex) return loadpkg(path.dirname(dir), cb);\n      readFile(pkgfile, function (err, body) {\n        if (err) cb(err);\n\n        try {\n          var pkg = JSON.parse(body);\n        } catch (err) {}\n\n        if (pkg && opts.packageFilter) {\n          pkg = opts.packageFilter(pkg, pkgfile);\n        }\n\n        cb(null, pkg, dir);\n      });\n    });\n  }\n\n  function loadAsDirectory(x, fpkg, cb) {\n    if (typeof fpkg === 'function') {\n      cb = fpkg;\n      fpkg = opts.package;\n    }\n\n    var pkgfile = path.join(x, '/package.json');\n    isFile(pkgfile, function (err, ex) {\n      if (err) return cb(err);\n      if (!ex) return loadAsFile(path.join(x, '/index'), fpkg, cb);\n      readFile(pkgfile, function (err, body) {\n        if (err) return cb(err);\n\n        try {\n          var pkg = JSON.parse(body);\n        } catch (err) {}\n\n        if (opts.packageFilter) {\n          pkg = opts.packageFilter(pkg, pkgfile);\n        }\n\n        if (pkg.main) {\n          if (pkg.main === '.' || pkg.main === './') {\n            pkg.main = 'index';\n          }\n\n          loadAsFile(path.resolve(x, pkg.main), pkg, function (err, m, pkg) {\n            if (err) return cb(err);\n            if (m) return cb(null, m, pkg);\n            if (!pkg) return loadAsFile(path.join(x, '/index'), pkg, cb);\n            var dir = path.resolve(x, pkg.main);\n            loadAsDirectory(dir, pkg, function (err, n, pkg) {\n              if (err) return cb(err);\n              if (n) return cb(null, n, pkg);\n              loadAsFile(path.join(x, '/index'), pkg, cb);\n            });\n          });\n          return;\n        }\n\n        loadAsFile(path.join(x, '/index'), pkg, cb);\n      });\n    });\n  }\n\n  function loadNodeModules(x, start, cb) {\n    (function process(dirs) {\n      if (dirs.length === 0) return cb(null, undefined);\n      var dir = dirs[0];\n      var file = path.join(dir, '/', x);\n      loadAsFile(file, undefined, onfile);\n\n      function onfile(err, m, pkg) {\n        if (err) return cb(err);\n        if (m) return cb(null, m, pkg);\n        loadAsDirectory(path.join(dir, '/', x), undefined, ondir);\n      }\n\n      function ondir(err, n, pkg) {\n        if (err) return cb(err);\n        if (n) return cb(null, n, pkg);\n        process(dirs.slice(1));\n      }\n    })(nodeModulesPaths(start, opts));\n  }\n};","map":null,"metadata":{},"sourceType":"script"}