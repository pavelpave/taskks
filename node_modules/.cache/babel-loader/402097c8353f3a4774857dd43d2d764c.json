{"ast":null,"code":"/**\r\n * node-crc32-stream\r\n *\r\n * Copyright (c) 2014 Chris Talkington, contributors.\r\n * Licensed under the MIT license.\r\n * https://github.com/archiverjs/node-crc32-stream/blob/master/LICENSE-MIT\r\n */\nvar zlib = require('zlib');\n\nvar inherits = require('util').inherits;\n\nvar crc32 = require('crc').crc32;\n\nvar DeflateCRC32Stream = module.exports = function (options) {\n  zlib.DeflateRaw.call(this, options);\n  this.checksum = new Buffer(4);\n  this.checksum.writeInt32BE(0, 0);\n  this.rawSize = 0;\n  this.compressedSize = 0; // BC v0.8\n\n  if (typeof zlib.DeflateRaw.prototype.push !== 'function') {\n    this.on('data', function (chunk) {\n      if (chunk) {\n        this.compressedSize += chunk.length;\n      }\n    });\n  }\n};\n\ninherits(DeflateCRC32Stream, zlib.DeflateRaw);\n\nDeflateCRC32Stream.prototype.push = function (chunk, encoding) {\n  if (chunk) {\n    this.compressedSize += chunk.length;\n  }\n\n  return zlib.DeflateRaw.prototype.push.call(this, chunk, encoding);\n};\n\nDeflateCRC32Stream.prototype.write = function (chunk, enc, cb) {\n  if (chunk) {\n    this.checksum = crc32(chunk, this.checksum);\n    this.rawSize += chunk.length;\n  }\n\n  return zlib.DeflateRaw.prototype.write.call(this, chunk, enc, cb);\n};\n\nDeflateCRC32Stream.prototype.digest = function (encoding) {\n  var checksum = new Buffer(4);\n  checksum.writeUInt32BE(this.checksum >>> 0, 0);\n  return encoding ? checksum.toString(encoding) : checksum;\n};\n\nDeflateCRC32Stream.prototype.hex = function () {\n  return this.digest('hex').toUpperCase();\n};\n\nDeflateCRC32Stream.prototype.size = function (compressed) {\n  compressed = compressed || false;\n\n  if (compressed) {\n    return this.compressedSize;\n  } else {\n    return this.rawSize;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}