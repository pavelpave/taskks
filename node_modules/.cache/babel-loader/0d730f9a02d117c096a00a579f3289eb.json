{"ast":null,"code":"/*!\n * regex-cache <https://github.com/jonschlinkert/regex-cache>\n *\n * Copyright (c) 2015-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n'use strict';\n\nvar equal = require('is-equal-shallow');\n\nvar basic = {};\nvar cache = {};\n/**\n * Expose `regexCache`\n */\n\nmodule.exports = regexCache;\n/**\n * Memoize the results of a call to the new RegExp constructor.\n *\n * @param  {Function} fn [description]\n * @param  {String} str [description]\n * @param  {Options} options [description]\n * @param  {Boolean} nocompare [description]\n * @return {RegExp}\n */\n\nfunction regexCache(fn, str, opts) {\n  var key = '_default_',\n      regex,\n      cached;\n\n  if (!str && !opts) {\n    if (typeof fn !== 'function') {\n      return fn;\n    }\n\n    return basic[key] || (basic[key] = fn(str));\n  }\n\n  var isString = typeof str === 'string';\n\n  if (isString) {\n    if (!opts) {\n      return basic[str] || (basic[str] = fn(str));\n    }\n\n    key = str;\n  } else {\n    opts = str;\n  }\n\n  cached = cache[key];\n\n  if (cached && equal(cached.opts, opts)) {\n    return cached.regex;\n  }\n\n  memo(key, opts, regex = fn(str, opts));\n  return regex;\n}\n\nfunction memo(key, opts, regex) {\n  cache[key] = {\n    regex: regex,\n    opts: opts\n  };\n}\n/**\n * Expose `cache`\n */\n\n\nmodule.exports.cache = cache;\nmodule.exports.basic = basic;","map":null,"metadata":{},"sourceType":"script"}