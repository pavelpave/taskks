{"ast":null,"code":"/**\n* upath http://github.com/anodynos/upath/\n*\n* A proxy to `path`, replacing `\\` with `/` for all results & new methods to normalize & join keeping leading `./` and add, change, default, trim file extensions.\n* Version 1.1.1 - Compiled on 2019-03-07 10:45:51\n* Repository git://github.com/anodynos/upath\n* Copyright(c) 2019 Angelos Pikoulas <agelos.pikoulas@gmail.com>\n* License MIT\n*/\n// Generated by uRequire v0.7.0-beta.33 target: 'lib' template: 'nodejs'\nvar VERSION = '1.1.1'; // injected by urequire-rc-inject-version\n\nvar extraFn,\n    extraFunctions,\n    isFunction,\n    isString,\n    isValidExt,\n    name,\n    path,\n    propName,\n    propValue,\n    toUnix,\n    upath,\n    slice = [].slice,\n    indexOf = [].indexOf || function (item) {\n  for (var i = 0, l = this.length; i < l; i++) {\n    if (i in this && this[i] === item) return i;\n  }\n\n  return -1;\n},\n    hasProp = {}.hasOwnProperty;\n\npath = require(\"path\");\n\nisFunction = function isFunction(val) {\n  return val instanceof Function;\n};\n\nisString = function isString(val) {\n  return typeof val === \"string\" || !!val && typeof val === \"object\" && Object.prototype.toString.call(val) === \"[object String]\";\n};\n\nupath = exports;\nupath.VERSION = typeof VERSION !== \"undefined\" && VERSION !== null ? VERSION : \"NO-VERSION\";\n\ntoUnix = function toUnix(p) {\n  var double;\n  p = p.replace(/\\\\/g, \"/\");\n  double = /\\/\\//;\n\n  while (p.match(double)) {\n    p = p.replace(double, \"/\");\n  }\n\n  return p;\n};\n\nfor (propName in path) {\n  propValue = path[propName];\n\n  if (isFunction(propValue)) {\n    upath[propName] = function (propName) {\n      return function () {\n        var args, result;\n        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n        args = args.map(function (p) {\n          if (isString(p)) {\n            return toUnix(p);\n          } else {\n            return p;\n          }\n        });\n        result = path[propName].apply(path, args);\n\n        if (isString(result)) {\n          return toUnix(result);\n        } else {\n          return result;\n        }\n      };\n    }(propName);\n  } else {\n    upath[propName] = propValue;\n  }\n}\n\nupath.sep = \"/\";\nextraFunctions = {\n  toUnix: toUnix,\n  normalizeSafe: function normalizeSafe(p) {\n    p = toUnix(p);\n\n    if (p.startsWith(\"./\")) {\n      if (p.startsWith(\"./..\") || p === \"./\") {\n        return upath.normalize(p);\n      } else {\n        return \"./\" + upath.normalize(p);\n      }\n    } else {\n      return upath.normalize(p);\n    }\n  },\n  normalizeTrim: function normalizeTrim(p) {\n    p = upath.normalizeSafe(p);\n\n    if (p.endsWith(\"/\")) {\n      return p.slice(0, +(p.length - 2) + 1 || 9000000000);\n    } else {\n      return p;\n    }\n  },\n  joinSafe: function joinSafe() {\n    var p, result;\n    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    result = upath.join.apply(null, p);\n\n    if (p[0].startsWith(\"./\") && !result.startsWith(\"./\")) {\n      result = \"./\" + result;\n    }\n\n    return result;\n  },\n  addExt: function addExt(file, ext) {\n    if (!ext) {\n      return file;\n    } else {\n      if (ext[0] !== \".\") {\n        ext = \".\" + ext;\n      }\n\n      return file + (file.endsWith(ext) ? \"\" : ext);\n    }\n  },\n  trimExt: function trimExt(filename, ignoreExts, maxSize) {\n    var oldExt;\n\n    if (maxSize == null) {\n      maxSize = 7;\n    }\n\n    oldExt = upath.extname(filename);\n\n    if (isValidExt(oldExt, ignoreExts, maxSize)) {\n      return filename.slice(0, +(filename.length - oldExt.length - 1) + 1 || 9000000000);\n    } else {\n      return filename;\n    }\n  },\n  removeExt: function removeExt(filename, ext) {\n    if (!ext) {\n      return filename;\n    } else {\n      ext = ext[0] === \".\" ? ext : \".\" + ext;\n\n      if (upath.extname(filename) === ext) {\n        return upath.trimExt(filename);\n      } else {\n        return filename;\n      }\n    }\n  },\n  changeExt: function changeExt(filename, ext, ignoreExts, maxSize) {\n    if (maxSize == null) {\n      maxSize = 7;\n    }\n\n    return upath.trimExt(filename, ignoreExts, maxSize) + (!ext ? \"\" : ext[0] === \".\" ? ext : \".\" + ext);\n  },\n  defaultExt: function defaultExt(filename, ext, ignoreExts, maxSize) {\n    var oldExt;\n\n    if (maxSize == null) {\n      maxSize = 7;\n    }\n\n    oldExt = upath.extname(filename);\n\n    if (isValidExt(oldExt, ignoreExts, maxSize)) {\n      return filename;\n    } else {\n      return upath.addExt(filename, ext);\n    }\n  }\n};\n\nisValidExt = function isValidExt(ext, ignoreExts, maxSize) {\n  if (ignoreExts == null) {\n    ignoreExts = [];\n  }\n\n  return ext && ext.length <= maxSize && indexOf.call(ignoreExts.map(function (e) {\n    return (e && e[0] !== \".\" ? \".\" : \"\") + e;\n  }), ext) < 0;\n};\n\nfor (name in extraFunctions) {\n  if (!hasProp.call(extraFunctions, name)) continue;\n  extraFn = extraFunctions[name];\n\n  if (upath[name] !== void 0) {\n    throw new Error(\"path.\" + name + \" already exists.\");\n  } else {\n    upath[name] = extraFn;\n  }\n}\n\n;","map":null,"metadata":{},"sourceType":"script"}