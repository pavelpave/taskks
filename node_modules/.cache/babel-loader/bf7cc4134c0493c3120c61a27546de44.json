{"ast":null,"code":"var current = process.versions && process.versions.node && process.versions.node.split('.') || [];\n\nfunction specifierIncluded(specifier) {\n  var parts = specifier.split(' ');\n  var op = parts.length > 1 ? parts[0] : '=';\n  var versionParts = (parts.length > 1 ? parts[1] : parts[0]).split('.');\n\n  for (var i = 0; i < 3; ++i) {\n    var cur = Number(current[i] || 0);\n    var ver = Number(versionParts[i] || 0);\n\n    if (cur === ver) {\n      continue; // eslint-disable-line no-restricted-syntax, no-continue\n    }\n\n    if (op === '<') {\n      return cur < ver;\n    } else if (op === '>=') {\n      return cur >= ver;\n    } else {\n      return false;\n    }\n  }\n\n  return op === '>=';\n}\n\nfunction matchesRange(range) {\n  var specifiers = range.split(/ ?&& ?/);\n\n  if (specifiers.length === 0) {\n    return false;\n  }\n\n  for (var i = 0; i < specifiers.length; ++i) {\n    if (!specifierIncluded(specifiers[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction versionIncluded(specifierValue) {\n  if (typeof specifierValue === 'boolean') {\n    return specifierValue;\n  }\n\n  if (specifierValue && typeof specifierValue === 'object') {\n    for (var i = 0; i < specifierValue.length; ++i) {\n      if (matchesRange(specifierValue[i])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  return matchesRange(specifierValue);\n}\n\nvar data = require('./core.json');\n\nvar core = {};\n\nfor (var mod in data) {\n  // eslint-disable-line no-restricted-syntax\n  if (Object.prototype.hasOwnProperty.call(data, mod)) {\n    core[mod] = versionIncluded(data[mod]);\n  }\n}\n\nmodule.exports = core;","map":null,"metadata":{},"sourceType":"script"}