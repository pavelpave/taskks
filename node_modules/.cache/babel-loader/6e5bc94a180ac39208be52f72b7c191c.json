{"ast":null,"code":"import _objectSpread from \"/home/garpix/task_react_App/myapp/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as axios from 'axios';\nimport React, { Component } from 'react'; // import state from '../state/state'\n\nconst urlBase = 'http://garpixcms.staging.garpix.com/garpix_workflow/api/v1/';\nexport default class axioPost extends Component {\n  constructor(el, urlProps, state) {\n    super(el, urlProps, state);\n    this.state = state;\n    this.el = el;\n    this.urlProps = urlProps;\n    this.axioRequests = this.axioRequests.bind(this);\n  }\n\n  axioRequests() {\n    const headers = {\n      'Authorization': 'Token 6668b8cfdf927ba7710a9b0890de66c12d0b69fa'\n    };\n    axios.post(\"\".concat(urlBase, \"task/\").concat(this.el).concat(this.urlProps), {}, {\n      headers\n    }).then(response => {\n      let newstate = _objectSpread({}, this.state);\n\n      console.log(response.data);\n      response.data.map(newtask => {\n        newstate.opisTask.map(oldtask => {\n          if (newtask.id === oldtask.id) {\n            return newtask;\n          }\n\n          return oldtask;\n        });\n      }); //  this.state.opisTask.map((el,i) =>{\n      //    for (let j = 0; j < response.data.length; j++) {\n      //     if(el.id === response.data[j].id){\n      //       el = response.data[j]\n      //     }      \n      //    }\n      //     console.log( this.state);\n      //  })\n\n      this.setState(newstate);\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null);\n  }\n\n}","map":{"version":3,"sources":["/home/garpix/task_react_App/myapp/src/ui/axioButton.js"],"names":["axios","React","Component","urlBase","axioPost","constructor","el","urlProps","state","axioRequests","bind","headers","post","then","response","newstate","console","log","data","map","newtask","opisTask","oldtask","id","setState","catch","error","render"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,MAAMC,OAAO,GAAG,6DAAhB;AAGA,eAAe,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAC9CG,EAAAA,WAAW,CAACC,EAAD,EAAKC,QAAL,EAAeC,KAAf,EAAsB;AAC/B,UAAMF,EAAN,EAAUC,QAAV,EAAoBC,KAApB;AACA,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKF,EAAL,GAAUA,EAAV;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKE,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AACDD,EAAAA,YAAY,GAAG;AAEb,UAAME,OAAO,GAAG;AACd,uBAAiB;AADH,KAAhB;AAGAX,IAAAA,KAAK,CAACY,IAAN,WAAcT,OAAd,kBAA6B,KAAKG,EAAlC,SAAuC,KAAKC,QAA5C,GAAwD,EAAxD,EAA4D;AAAEI,MAAAA;AAAF,KAA5D,EACGE,IADH,CACSC,QAAD,IAAc;AAClB,UAAIC,QAAQ,qBAAO,KAAKP,KAAZ,CAAZ;;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,IAArB;AACAJ,MAAAA,QAAQ,CAACI,IAAT,CAAcC,GAAd,CAAkBC,OAAO,IAAI;AAC3BL,QAAAA,QAAQ,CAACM,QAAT,CAAkBF,GAAlB,CAAsBG,OAAO,IAAI;AAC/B,cAAGF,OAAO,CAACG,EAAR,KAAeD,OAAO,CAACC,EAA1B,EAA8B;AAC5B,mBAAOH,OAAP;AACD;;AACD,iBAAOE,OAAP;AACD,SALD;AAMD,OAPD,EAHkB,CAWlB;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AACA,WAAKE,QAAL,CAAcT,QAAd;AACD,KAvBH,EAwBGU,KAxBH,CAwBUC,KAAD,IAAW;AAChBV,MAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ;AACD,KA1BH;AA2BD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACE,yCADF;AAID;;AA/C6C","sourcesContent":["import * as axios from 'axios';\nimport React, { Component } from 'react'\n// import state from '../state/state'\nconst urlBase = 'http://garpixcms.staging.garpix.com/garpix_workflow/api/v1/';\n\n\nexport default class axioPost extends Component {\n  constructor(el, urlProps, state) {\n    super(el, urlProps, state)\n    this.state = state\n    this.el = el\n    this.urlProps = urlProps\n    this.axioRequests = this.axioRequests.bind(this)\n  }\n  axioRequests() {\n\n    const headers = {\n      'Authorization': 'Token 6668b8cfdf927ba7710a9b0890de66c12d0b69fa'\n    }\n    axios.post(`${urlBase}task/${this.el}${this.urlProps}`, {}, { headers })\n      .then((response) => {\n        let newstate = {...this.state};\n        console.log(response.data)\n        response.data.map(newtask => {\n          newstate.opisTask.map(oldtask => {\n            if(newtask.id === oldtask.id) {\n              return newtask;\n            }\n            return oldtask\n          })\n        });\n        //  this.state.opisTask.map((el,i) =>{\n        //    for (let j = 0; j < response.data.length; j++) {\n        //     if(el.id === response.data[j].id){\n        //       el = response.data[j]\n        //     }      \n\n        //    }\n        //     console.log( this.state);\n\n        //  })\n        this.setState(newstate);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  render() {\n    return (\n      <>\n      </>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}