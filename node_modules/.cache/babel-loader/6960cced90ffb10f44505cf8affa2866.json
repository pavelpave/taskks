{"ast":null,"code":"var acorn = require('acorn');\n\nvar walk = require('acorn/dist/walk');\n\nvar defined = require('defined');\n\nvar requireRe = /\\brequire\\b/;\n\nfunction parse(src, opts) {\n  if (!opts) opts = {};\n  return acorn.parse(src, {\n    ecmaVersion: defined(opts.ecmaVersion, 9),\n    sourceType: opts.sourceType,\n    ranges: defined(opts.ranges, opts.range),\n    locations: defined(opts.locations, opts.loc),\n    allowReserved: defined(opts.allowReserved, true),\n    allowReturnOutsideFunction: defined(opts.allowReturnOutsideFunction, true),\n    allowImportExportEverywhere: defined(opts.allowImportExportEverywhere, true),\n    allowHashBang: defined(opts.allowHashBang, true)\n  });\n}\n\nvar exports = module.exports = function (src, opts) {\n  return exports.find(src, opts).strings;\n};\n\nexports.find = function (src, opts) {\n  if (!opts) opts = {};\n  var word = opts.word === undefined ? 'require' : opts.word;\n  if (typeof src !== 'string') src = String(src);\n\n  var isRequire = opts.isRequire || function (node) {\n    return node.callee.type === 'Identifier' && node.callee.name === word;\n  };\n\n  var modules = {\n    strings: [],\n    expressions: []\n  };\n  if (opts.nodes) modules.nodes = [];\n  var wordRe = word === 'require' ? requireRe : RegExp('\\\\b' + word + '\\\\b');\n  if (!wordRe.test(src)) return modules;\n  var ast = parse(src, opts.parse);\n\n  function visit(node, st, c) {\n    var hasRequire = wordRe.test(src.slice(node.start, node.end));\n    if (!hasRequire) return;\n    walk.base[node.type](node, st, c);\n    if (node.type !== 'CallExpression') return;\n\n    if (isRequire(node)) {\n      if (node.arguments.length) {\n        var arg = node.arguments[0];\n\n        if (arg.type === 'Literal') {\n          modules.strings.push(arg.value);\n        } else if (arg.type === 'TemplateLiteral' && arg.quasis.length === 1 && arg.expressions.length === 0) {\n          modules.strings.push(arg.quasis[0].value.raw);\n        } else {\n          modules.expressions.push(src.slice(arg.start, arg.end));\n        }\n      }\n\n      if (opts.nodes) modules.nodes.push(node);\n    }\n  }\n\n  walk.recursive(ast, null, {\n    Statement: visit,\n    Expression: visit\n  });\n  return modules;\n};","map":null,"metadata":{},"sourceType":"script"}