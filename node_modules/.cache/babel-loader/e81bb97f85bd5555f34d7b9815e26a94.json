{"ast":null,"code":"var assert = require('assert');\n\nmodule.exports = dashAst;\n/**\n * Call `cb` on each node in `ast`. If `cb` is an object, `cb.enter` is called before processing a Node's children,\n * and `cb.leave` is called after processing a Node's children.\n */\n\nfunction dashAst(ast, cb) {\n  assert(ast && typeof ast === 'object' && typeof ast.type === 'string', 'dash-ast: ast must be an AST node');\n\n  if (typeof cb === 'object') {\n    assert(typeof cb.enter === 'function' || typeof cb.leave === 'function', 'dash-ast: visitor must be an object with enter/leave functions');\n    walk(ast, null, cb.enter || undefined, cb.leave || undefined);\n  } else {\n    assert(cb && typeof cb === 'function', 'dash-ast: callback must be a function');\n    walk(ast, null, cb, undefined);\n  }\n}\n/**\n * Call `cb` on each node in `ast`. Each node will have a `.parent` property.\n */\n\n\ndashAst.withParent = function dashAstParent(ast, cb) {\n  assert(ast && typeof ast === 'object' && typeof ast.type === 'string', 'dash-ast.withParent: ast must be an AST node');\n\n  if (typeof cb === 'object') {\n    assert(typeof cb.enter === 'function' || typeof cb.leave === 'function', 'dash-ast.withParent: visitor must be an object with enter/leave functions');\n    var enter = cb.enter;\n    var leave = cb.leave;\n    walk(ast, null, function (node, parent) {\n      node.parent = parent;\n      if (enter !== undefined) return enter(node);\n    }, leave ? function (node) {\n      leave(node);\n    } : undefined);\n  } else {\n    assert(cb && typeof cb === 'function', 'dash-ast.withParent: callback must be a function');\n    walk(ast, null, function (node, parent) {\n      node.parent = parent;\n      return cb(node);\n    }, undefined);\n  }\n};\n\nfunction walk(node, parent, enter, leave) {\n  var cont = enter !== undefined ? enter(node, parent) : undefined;\n  if (cont === false) return;\n\n  for (var k in node) {\n    if (has(node, k)) {\n      if (k === 'parent') continue;\n\n      if (isNode(node[k])) {\n        walk(node[k], node, enter, leave);\n      } else if (Array.isArray(node[k])) {\n        walkArray(node[k], node, enter, leave);\n      }\n    }\n  }\n\n  if (leave !== undefined) leave(node, parent);\n}\n\nfunction walkArray(nodes, parent, enter, leave) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (isNode(nodes[i])) walk(nodes[i], parent, enter, leave);\n  }\n}\n\nfunction isNode(node) {\n  return typeof node === 'object' && node && typeof node.type === 'string';\n}\n\nfunction has(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}","map":null,"metadata":{},"sourceType":"script"}