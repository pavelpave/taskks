{"ast":null,"code":"var utils = require(\"./utils\"),\n    newError = utils.newError,\n    getJsonwireError = utils.getJsonwireError,\n    isWebDriverException = utils.isWebDriverException;\n\nvar cbStub = function cbStub() {}; // just calls the callback when there is no result\n\n\nexports.simpleCallback = function (cb) {\n  cb = cb || cbStub;\n  return function (err, data) {\n    if (err) {\n      return cb(err);\n    }\n\n    if (data === '' || data === 'OK') {\n      // expected behaviour when not returning JsonWire response\n      cb(null);\n    } else {\n      // looking for JsonWire response\n      var jsonWireRes;\n      var jsonwireError;\n      var errorMessage;\n      var error;\n\n      try {\n        jsonWireRes = JSON.parse(data);\n      } catch (ign) {}\n\n      if (jsonWireRes && typeof jsonWireRes.status !== \"undefined\") {\n        // valid JsonWire response\n        if (jsonWireRes.status === 0) {\n          cb(null);\n        } else {\n          jsonwireError = getJsonwireError(jsonWireRes.status);\n          errorMessage = 'Error response status: ' + jsonWireRes.status;\n\n          if (jsonwireError) {\n            errorMessage += \", \" + jsonwireError.summary + \" - \" + jsonwireError.detail;\n          }\n\n          if (jsonWireRes.value && jsonWireRes.value.message) {\n            errorMessage += \" Selenium error: \" + jsonWireRes.value.message;\n          }\n\n          error = newError({\n            message: errorMessage,\n            status: jsonWireRes.status,\n            cause: jsonWireRes\n          });\n\n          if (jsonwireError) {\n            error['jsonwire-error'] = jsonwireError;\n          }\n\n          cb(error);\n        }\n      } else if (jsonWireRes && typeof jsonWireRes.value !== \"undefined\") {\n        // valid W3C draft spec response\n        if (jsonWireRes.value === null || Object.keys(jsonWireRes.value).length === 0) {\n          cb(null);\n        } else {\n          jsonwireError = jsonWireRes.value;\n          errorMessage = 'Error response: ' + jsonwireError.error + ' - ' + jsonwireError.message;\n\n          if (jsonwireError.stacktrace) {\n            errorMessage += ' - Stack trace:\\n' + jsonwireError.stacktrace;\n          }\n\n          error = newError({\n            message: errorMessage,\n            cause: jsonwireError\n          });\n          cb(error);\n        }\n      } else {\n        // something wrong\n        cb(newError({\n          message: 'Unexpected data in simpleCallback.',\n          data: jsonWireRes || data\n        }));\n      }\n    }\n  };\n}; // base for all callback handling data\n\n\nvar callbackWithDataBase = function callbackWithDataBase(cb) {\n  cb = cb || cbStub;\n  return function (err, data) {\n    if (err) {\n      return cb(err);\n    }\n\n    var obj, alertText;\n\n    try {\n      obj = JSON.parse(data);\n    } catch (e) {\n      return cb(newError({\n        message: 'Not JSON response',\n        data: data\n      }));\n    }\n\n    try {\n      alertText = obj.value.alert.text;\n    } catch (e) {\n      alertText = '';\n    }\n\n    if (obj.status > 0) {\n      var jsonwireError = getJsonwireError(obj.status);\n      var errorMessage = 'Error response status: ' + obj.status + \", \" + alertText;\n\n      if (jsonwireError) {\n        errorMessage += \", \" + jsonwireError.summary + \" - \" + jsonwireError.detail;\n      }\n\n      if (obj.value && obj.value.message) {\n        errorMessage += \" Selenium error: \" + obj.value.message;\n      }\n\n      var error = newError({\n        message: errorMessage,\n        status: obj.status,\n        cause: obj\n      });\n\n      if (jsonwireError) {\n        error['jsonwire-error'] = jsonwireError;\n      }\n\n      cb(error);\n    } else {\n      cb(null, obj);\n    }\n  };\n}; // retrieves field value from result\n\n\nexports.callbackWithData = function (cb, browser) {\n  cb = cb || cbStub;\n  return callbackWithDataBase(function (err, obj) {\n    if (err) {\n      return cb(err);\n    }\n\n    if (isWebDriverException(obj.value)) {\n      return cb(newError({\n        message: obj.value.message,\n        cause: obj.value\n      }));\n    } // we might get a WebElement back as part of executeScript, so let's\n    // check to make sure we convert if necessary to element objects\n\n\n    var elId = utils.getElementId(obj.value);\n\n    if (obj.value && typeof elId !== \"undefined\") {\n      obj.value = browser.newElement(elId);\n    } else if (Object.prototype.toString.call(obj.value) === \"[object Array]\") {\n      for (var i = 0; i < obj.value.length; i++) {\n        elId = utils.getElementId(obj.value[i]);\n\n        if (obj.value[i] && typeof elId !== \"undefined\") {\n          obj.value[i] = browser.newElement(elId);\n        }\n      }\n    }\n\n    cb(null, obj.value);\n  });\n}; // retrieves ONE element\n\n\nexports.elementCallback = function (cb, browser) {\n  cb = cb || cbStub;\n  return callbackWithDataBase(function (err, obj) {\n    if (err) {\n      return cb(err);\n    }\n\n    if (isWebDriverException(obj.value)) {\n      return cb(newError({\n        message: obj.value.message,\n        cause: obj.value\n      }));\n    }\n\n    var elId = utils.getElementId(obj.value);\n\n    if (!elId) {\n      cb(newError({\n        message: \"no ELEMENT in response value field.\",\n        cause: obj\n      }));\n    } else {\n      var el = browser.newElement(elId);\n      cb(null, el);\n    }\n  });\n}; // retrieves SEVERAL elements\n\n\nexports.elementsCallback = function (cb, browser) {\n  cb = cb || cbStub;\n  return callbackWithDataBase(function (err, obj) {\n    if (err) {\n      return cb(err);\n    }\n\n    if (isWebDriverException(obj.value)) {\n      return cb(newError({\n        message: obj.value.message,\n        cause: obj.value\n      }));\n    }\n\n    if (!Array.isArray(obj.value)) {\n      return cb(newError({\n        message: \"Response value field is not an Array.\",\n        cause: obj.value\n      }));\n    }\n\n    var i,\n        elements = [];\n\n    for (i = 0; i < obj.value.length; i++) {\n      var value = obj.value[i];\n      var elId = utils.getElementId(value);\n      var el = browser.newElement(elId);\n      elements.push(el);\n    }\n\n    cb(null, elements);\n  });\n}; // retrieves ONE or SEVERAL elements\n\n\nexports.elementOrElementsCallback = function (cb, browser) {\n  cb = cb || cbStub;\n  return callbackWithDataBase(function (err, obj) {\n    if (err) {\n      return cb(err);\n    }\n\n    if (isWebDriverException(obj.value)) {\n      return cb(newError({\n        message: obj.value.message,\n        cause: obj.value\n      }));\n    }\n\n    var el;\n    var elId = utils.getElementId(obj.value);\n\n    if (elId) {\n      el = browser.newElement(elId);\n      cb(null, el);\n    } else if (Array.isArray(obj.value)) {\n      var i,\n          elements = [];\n\n      for (i = 0; i < obj.value.length; i++) {\n        elId = utils.getElementId(obj.value[i]);\n        el = browser.newElement(elId);\n        elements.push(el);\n      }\n\n      cb(null, elements);\n    } else {\n      cb(newError({\n        message: \"no element or element array in response value field.\",\n        cause: obj\n      }));\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}