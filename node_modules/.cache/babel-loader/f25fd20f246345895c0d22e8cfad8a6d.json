{"ast":null,"code":"/*!\n * micromatch <https://github.com/jonschlinkert/micromatch>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n'use strict';\n\nvar utils = require('./utils');\n\nvar Glob = require('./glob');\n/**\n * Expose `expand`\n */\n\n\nmodule.exports = expand;\n/**\n * Expand a glob pattern to resolve braces and\n * similar patterns before converting to regex.\n *\n * @param  {String|Array} `pattern`\n * @param  {Array} `files`\n * @param  {Options} `opts`\n * @return {Array}\n */\n\nfunction expand(pattern, options) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('micromatch.expand(): argument should be a string.');\n  }\n\n  var glob = new Glob(pattern, options || {});\n  var opts = glob.options;\n\n  if (!utils.isGlob(pattern)) {\n    glob.pattern = glob.pattern.replace(/([\\/.])/g, '\\\\$1');\n    return glob;\n  }\n\n  glob.pattern = glob.pattern.replace(/(\\+)(?!\\()/g, '\\\\$1');\n  glob.pattern = glob.pattern.split('$').join('\\\\$');\n\n  if (typeof opts.braces !== 'boolean' && typeof opts.nobraces !== 'boolean') {\n    opts.braces = true;\n  }\n\n  if (glob.pattern === '.*') {\n    return {\n      pattern: '\\\\.' + star,\n      tokens: tok,\n      options: opts\n    };\n  }\n\n  if (glob.pattern === '*') {\n    return {\n      pattern: oneStar(opts.dot),\n      tokens: tok,\n      options: opts\n    };\n  } // parse the glob pattern into tokens\n\n\n  glob.parse();\n  var tok = glob.tokens;\n  tok.is.negated = opts.negated; // dotfile handling\n\n  if ((opts.dotfiles === true || tok.is.dotfile) && opts.dot !== false) {\n    opts.dotfiles = true;\n    opts.dot = true;\n  }\n\n  if ((opts.dotdirs === true || tok.is.dotdir) && opts.dot !== false) {\n    opts.dotdirs = true;\n    opts.dot = true;\n  } // check for braces with a dotfile pattern\n\n\n  if (/[{,]\\./.test(glob.pattern)) {\n    opts.makeRe = false;\n    opts.dot = true;\n  }\n\n  if (opts.nonegate !== true) {\n    opts.negated = glob.negated;\n  } // if the leading character is a dot or a slash, escape it\n\n\n  if (glob.pattern.charAt(0) === '.' && glob.pattern.charAt(1) !== '/') {\n    glob.pattern = '\\\\' + glob.pattern;\n  }\n  /**\n   * Extended globs\n   */\n  // expand braces, e.g `{1..5}`\n\n\n  glob.track('before braces');\n\n  if (tok.is.braces) {\n    glob.braces();\n  }\n\n  glob.track('after braces'); // expand extglobs, e.g `foo/!(a|b)`\n\n  glob.track('before extglob');\n\n  if (tok.is.extglob) {\n    glob.extglob();\n  }\n\n  glob.track('after extglob'); // expand brackets, e.g `[[:alpha:]]`\n\n  glob.track('before brackets');\n\n  if (tok.is.brackets) {\n    glob.brackets();\n  }\n\n  glob.track('after brackets'); // special patterns\n\n  glob._replace('[!', '[^');\n\n  glob._replace('(?', '(%~');\n\n  glob._replace(/\\[\\]/, '\\\\[\\\\]');\n\n  glob._replace('/[', '/' + (opts.dot ? dotfiles : nodot) + '[', true);\n\n  glob._replace('/?', '/' + (opts.dot ? dotfiles : nodot) + '[^/]', true);\n\n  glob._replace('/.', '/(?=.)\\\\.', true); // windows drives\n\n\n  glob._replace(/^(\\w):([\\\\\\/]+?)/gi, '(?=.)$1:$2', true); // negate slashes in exclusion ranges\n\n\n  if (glob.pattern.indexOf('[^') !== -1) {\n    glob.pattern = negateSlash(glob.pattern);\n  }\n\n  if (opts.globstar !== false && glob.pattern === '**') {\n    glob.pattern = globstar(opts.dot);\n  } else {\n    glob.pattern = balance(glob.pattern, '[', ']');\n    glob.escape(glob.pattern); // if the pattern has `**`\n\n    if (tok.is.globstar) {\n      glob.pattern = collapse(glob.pattern, '/**');\n      glob.pattern = collapse(glob.pattern, '**/');\n\n      glob._replace('/**/', '(?:/' + globstar(opts.dot) + '/|/)', true);\n\n      glob._replace(/\\*{2,}/g, '**'); // 'foo/*'\n\n\n      glob._replace(/(\\w+)\\*(?!\\/)/g, '$1[^/]*?', true);\n\n      glob._replace(/\\*\\*\\/\\*(\\w)/g, globstar(opts.dot) + '\\\\/' + (opts.dot ? dotfiles : nodot) + '[^/]*?$1', true);\n\n      if (opts.dot !== true) {\n        glob._replace(/\\*\\*\\/(.)/g, '(?:**\\\\/|)$1');\n      } // 'foo/**' or '{**,*}', but not 'foo**'\n\n\n      if (tok.path.dirname !== '' || /,\\*\\*|\\*\\*,/.test(glob.orig)) {\n        glob._replace('**', globstar(opts.dot), true);\n      }\n    } // ends with /*\n\n\n    glob._replace(/\\/\\*$/, '\\\\/' + oneStar(opts.dot), true); // ends with *, no slashes\n\n\n    glob._replace(/(?!\\/)\\*$/, star, true); // has 'n*.' (partial wildcard w/ file extension)\n\n\n    glob._replace(/([^\\/]+)\\*/, '$1' + oneStar(true), true); // has '*'\n\n\n    glob._replace('*', oneStar(opts.dot), true);\n\n    glob._replace('?.', '?\\\\.', true);\n\n    glob._replace('?:', '?:', true);\n\n    glob._replace(/\\?+/g, function (match) {\n      var len = match.length;\n\n      if (len === 1) {\n        return qmark;\n      }\n\n      return qmark + '{' + len + '}';\n    }); // escape '.abc' => '\\\\.abc'\n\n\n    glob._replace(/\\.([*\\w]+)/g, '\\\\.$1'); // fix '[^\\\\\\\\/]'\n\n\n    glob._replace(/\\[\\^[\\\\\\/]+\\]/g, qmark); // '///' => '\\/'\n\n\n    glob._replace(/\\/+/g, '\\\\/'); // '\\\\\\\\\\\\' => '\\\\'\n\n\n    glob._replace(/\\\\{2,}/g, '\\\\');\n  } // unescape previously escaped patterns\n\n\n  glob.unescape(glob.pattern);\n\n  glob._replace('__UNESC_STAR__', '*'); // escape dots that follow qmarks\n\n\n  glob._replace('?.', '?\\\\.'); // remove unnecessary slashes in character classes\n\n\n  glob._replace('[^\\\\/]', qmark);\n\n  if (glob.pattern.length > 1) {\n    if (/^[\\[?*]/.test(glob.pattern)) {\n      // only prepend the string if we don't want to match dotfiles\n      glob.pattern = (opts.dot ? dotfiles : nodot) + glob.pattern;\n    }\n  }\n\n  return glob;\n}\n/**\n * Collapse repeated character sequences.\n *\n * ```js\n * collapse('a/../../../b', '../');\n * //=> 'a/../b'\n * ```\n *\n * @param  {String} `str`\n * @param  {String} `ch` Character sequence to collapse\n * @return {String}\n */\n\n\nfunction collapse(str, ch) {\n  var res = str.split(ch);\n  var isFirst = res[0] === '';\n  var isLast = res[res.length - 1] === '';\n  res = res.filter(Boolean);\n  if (isFirst) res.unshift('');\n  if (isLast) res.push('');\n  return res.join(ch);\n}\n/**\n * Negate slashes in exclusion ranges, per glob spec:\n *\n * ```js\n * negateSlash('[^foo]');\n * //=> '[^\\\\/foo]'\n * ```\n *\n * @param  {String} `str` glob pattern\n * @return {String}\n */\n\n\nfunction negateSlash(str) {\n  return str.replace(/\\[\\^([^\\]]*?)\\]/g, function (match, inner) {\n    if (inner.indexOf('/') === -1) {\n      inner = '\\\\/' + inner;\n    }\n\n    return '[^' + inner + ']';\n  });\n}\n/**\n * Escape imbalanced braces/bracket. This is a very\n * basic, naive implementation that only does enough\n * to serve the purpose.\n */\n\n\nfunction balance(str, a, b) {\n  var aarr = str.split(a);\n  var alen = aarr.join('').length;\n  var blen = str.split(b).join('').length;\n\n  if (alen !== blen) {\n    str = aarr.join('\\\\' + a);\n    return str.split(b).join('\\\\' + b);\n  }\n\n  return str;\n}\n/**\n * Special patterns to be converted to regex.\n * Heuristics are used to simplify patterns\n * and speed up processing.\n */\n\n/* eslint no-multi-spaces: 0 */\n\n\nvar qmark = '[^/]';\nvar star = qmark + '*?';\nvar nodot = '(?!\\\\.)(?=.)';\nvar dotfileGlob = '(?:\\\\/|^)\\\\.{1,2}($|\\\\/)';\nvar dotfiles = '(?!' + dotfileGlob + ')(?=.)';\nvar twoStarDot = '(?:(?!' + dotfileGlob + ').)*?';\n/**\n * Create a regex for `*`.\n *\n * If `dot` is true, or the pattern does not begin with\n * a leading star, then return the simpler regex.\n */\n\nfunction oneStar(dotfile) {\n  return dotfile ? '(?!' + dotfileGlob + ')(?=.)' + star : nodot + star;\n}\n\nfunction globstar(dotfile) {\n  if (dotfile) {\n    return twoStarDot;\n  }\n\n  return '(?:(?!(?:\\\\/|^)\\\\.).)*?';\n}","map":null,"metadata":{},"sourceType":"script"}