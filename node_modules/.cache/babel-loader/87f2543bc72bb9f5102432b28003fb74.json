{"ast":null,"code":"/**\r\n * TAR Format Plugin\r\n *\r\n * @module plugins/tar\r\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\r\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\r\n */\nvar zlib = require('zlib');\n\nvar engine = require('tar-stream');\n\nvar util = require('archiver-utils');\n/**\r\n * @constructor\r\n * @param {TarOptions} options\r\n */\n\n\nvar Tar = function Tar(options) {\n  if (!(this instanceof Tar)) {\n    return new Tar(options);\n  }\n\n  options = this.options = util.defaults(options, {\n    gzip: false\n  });\n\n  if (typeof options.gzipOptions !== 'object') {\n    options.gzipOptions = {};\n  }\n\n  this.supports = {\n    directory: true,\n    symlink: true\n  };\n  this.engine = engine.pack(options);\n  this.compressor = false;\n\n  if (options.gzip) {\n    this.compressor = zlib.createGzip(options.gzipOptions);\n    this.compressor.on('error', this._onCompressorError.bind(this));\n  }\n};\n/**\r\n * [_onCompressorError description]\r\n *\r\n * @private\r\n * @param  {Error} err\r\n * @return void\r\n */\n\n\nTar.prototype._onCompressorError = function (err) {\n  this.engine.emit('error', err);\n};\n/**\r\n * [append description]\r\n *\r\n * @param  {(Buffer|Stream)} source\r\n * @param  {TarEntryData} data\r\n * @param  {Function} callback\r\n * @return void\r\n */\n\n\nTar.prototype.append = function (source, data, callback) {\n  var self = this;\n  data.mtime = data.date;\n\n  function append(err, sourceBuffer) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    self.engine.entry(data, sourceBuffer, function (err) {\n      callback(err, data);\n    });\n  }\n\n  if (data.sourceType === 'buffer') {\n    append(null, source);\n  } else if (data.sourceType === 'stream' && data._stats) {\n    data.size = data._stats.size;\n    var entry = self.engine.entry(data, function (err) {\n      callback(err, data);\n    });\n    source.pipe(entry);\n  } else if (data.sourceType === 'stream') {\n    util.collectStream(source, append);\n  }\n};\n/**\r\n * [finalize description]\r\n *\r\n * @return void\r\n */\n\n\nTar.prototype.finalize = function () {\n  this.engine.finalize();\n};\n/**\r\n * [on description]\r\n *\r\n * @return this.engine\r\n */\n\n\nTar.prototype.on = function () {\n  return this.engine.on.apply(this.engine, arguments);\n};\n/**\r\n * [pipe description]\r\n *\r\n * @param  {String} destination\r\n * @param  {Object} options\r\n * @return this.engine\r\n */\n\n\nTar.prototype.pipe = function (destination, options) {\n  if (this.compressor) {\n    return this.engine.pipe.apply(this.engine, [this.compressor]).pipe(destination, options);\n  } else {\n    return this.engine.pipe.apply(this.engine, arguments);\n  }\n};\n/**\r\n * [unpipe description]\r\n *\r\n * @return this.engine\r\n */\n\n\nTar.prototype.unpipe = function () {\n  if (this.compressor) {\n    return this.compressor.unpipe.apply(this.compressor, arguments);\n  } else {\n    return this.engine.unpipe.apply(this.engine, arguments);\n  }\n};\n\nmodule.exports = Tar;\n/**\r\n * @typedef {Object} TarOptions\r\n * @global\r\n * @property {Boolean} [gzip=false] Compress the tar archive using gzip.\r\n * @property {Object} [gzipOptions] Passed to [zlib]{@link https://nodejs.org/api/zlib.html#zlib_class_options}\r\n * to control compression.\r\n * @property {*} [*] See [tar-stream]{@link https://github.com/mafintosh/tar-stream} documentation for additional properties.\r\n */\n\n/**\r\n * @typedef {Object} TarEntryData\r\n * @global\r\n * @property {String} name Sets the entry name including internal path.\r\n * @property {(String|Date)} [date=NOW()] Sets the entry date.\r\n * @property {Number} [mode=D:0755/F:0644] Sets the entry permissions.\r\n * @property {String} [prefix] Sets a path prefix for the entry name. Useful\r\n * when working with methods like `directory` or `glob`.\r\n * @property {fs.Stats} [stats] Sets the fs stat data for this entry allowing\r\n * for reduction of fs stat calls when stat data is already known.\r\n */\n\n/**\r\n * TarStream Module\r\n * @external TarStream\r\n * @see {@link https://github.com/mafintosh/tar-stream}\r\n */","map":null,"metadata":{},"sourceType":"script"}