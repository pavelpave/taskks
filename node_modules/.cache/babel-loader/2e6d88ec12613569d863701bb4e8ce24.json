{"ast":null,"code":"var act = {\n  add: add,\n  update: update,\n  remove: remove\n},\n    emitterify = require('./emitterify'),\n    def = require('./def'),\n    is = require('./is'),\n    str = JSON.stringify,\n    parse = JSON.parse;\n\nmodule.exports = function set(d, skipEmit) {\n  return function (o, existing, max) {\n    if (!is.obj(o) && !is.fn(o)) return o;\n\n    if (!is.obj(d)) {\n      var log = existing || o.log || [],\n          root = o;\n      if (!is.def(max)) max = log.max || 0;\n      if (!max) log = [];\n      if (max < 0) log = log.concat(null);\n\n      if (max > 0) {\n        var s = str(o);\n        root = parse(s);\n        log = log.concat({\n          type: 'update',\n          value: parse(s),\n          time: log.length\n        });\n      }\n\n      def(log, 'max', max);\n      root.log ? root.log = log : def(emitterify(root, null), 'log', log, 1);\n      return root;\n    }\n\n    if (is.def(d.key)) {\n      if (!apply(o, d.type, (d.key = '' + d.key).split('.').filter(Boolean), d.value)) return false;\n    } else return false;\n\n    if (o.log && o.log.max) o.log.push((d.time = o.log.length, o.log.max > 0 ? d : null));\n    if (!skipEmit && o.emit) o.emit('change', d);\n    return o;\n  };\n};\n\nfunction apply(body, type, path, value) {\n  var next = path.shift();\n  if (!act[type]) return false;\n\n  if (path.length) {\n    if (!(next in body)) if (type == 'remove') return true;else body[next] = {};\n    return apply(body[next], type, path, value);\n  } else {\n    return !act[type](body, next, value);\n  }\n}\n\nfunction add(o, k, v) {\n  is.arr(o) ? o.splice(k, 0, v) : o[k] = v;\n}\n\nfunction update(o, k, v) {\n  if (!is.num(k) && !k) {\n    if (!is.obj(v)) return true;\n\n    for (var x in o) {\n      delete o[x];\n    }\n\n    for (var x in v) {\n      o[x] = v[x];\n    }\n  } else o[k] = v;\n}\n\nfunction remove(o, k, v) {\n  is.arr(o) ? o.splice(k, 1) : delete o[k];\n}","map":null,"metadata":{},"sourceType":"script"}