{"ast":null,"code":"/*!\n * braces <https://github.com/jonschlinkert/braces>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n'use strict';\n/**\n * Module dependencies\n */\n\nvar expand = require('expand-range');\n\nvar repeat = require('repeat-element');\n\nvar tokens = require('preserve');\n/**\n * Expose `braces`\n */\n\n\nmodule.exports = function (str, options) {\n  if (typeof str !== 'string') {\n    throw new Error('braces expects a string');\n  }\n\n  return braces(str, options);\n};\n/**\n * Expand `{foo,bar}` or `{1..5}` braces in the\n * given `string`.\n *\n * @param  {String} `str`\n * @param  {Array} `arr`\n * @param  {Object} `options`\n * @return {Array}\n */\n\n\nfunction braces(str, arr, options) {\n  if (str === '') {\n    return [];\n  }\n\n  if (!Array.isArray(arr)) {\n    options = arr;\n    arr = [];\n  }\n\n  var opts = options || {};\n  arr = arr || [];\n\n  if (typeof opts.nodupes === 'undefined') {\n    opts.nodupes = true;\n  }\n\n  var fn = opts.fn;\n  var es6;\n\n  if (typeof opts === 'function') {\n    fn = opts;\n    opts = {};\n  }\n\n  if (!(patternRe instanceof RegExp)) {\n    patternRe = patternRegex();\n  }\n\n  var matches = str.match(patternRe) || [];\n  var m = matches[0];\n\n  switch (m) {\n    case '\\\\,':\n      return escapeCommas(str, arr, opts);\n\n    case '\\\\.':\n      return escapeDots(str, arr, opts);\n\n    case '\\/.':\n      return escapePaths(str, arr, opts);\n\n    case ' ':\n      return splitWhitespace(str);\n\n    case '{,}':\n      return exponential(str, opts, braces);\n\n    case '{}':\n      return emptyBraces(str, arr, opts);\n\n    case '\\\\{':\n    case '\\\\}':\n      return escapeBraces(str, arr, opts);\n\n    case '${':\n      if (!/\\{[^{]+\\{/.test(str)) {\n        return arr.concat(str);\n      } else {\n        es6 = true;\n        str = tokens.before(str, es6Regex());\n      }\n\n  }\n\n  if (!(braceRe instanceof RegExp)) {\n    braceRe = braceRegex();\n  }\n\n  var match = braceRe.exec(str);\n\n  if (match == null) {\n    return [str];\n  }\n\n  var outter = match[1];\n  var inner = match[2];\n\n  if (inner === '') {\n    return [str];\n  }\n\n  var segs, segsLength;\n\n  if (inner.indexOf('..') !== -1) {\n    segs = expand(inner, opts, fn) || inner.split(',');\n    segsLength = segs.length;\n  } else if (inner[0] === '\"' || inner[0] === '\\'') {\n    return arr.concat(str.split(/['\"]/).join(''));\n  } else {\n    segs = inner.split(',');\n\n    if (opts.makeRe) {\n      return braces(str.replace(outter, wrap(segs, '|')), opts);\n    }\n\n    segsLength = segs.length;\n\n    if (segsLength === 1 && opts.bash) {\n      segs[0] = wrap(segs[0], '\\\\');\n    }\n  }\n\n  var len = segs.length;\n  var i = 0,\n      val;\n\n  while (len--) {\n    var path = segs[i++];\n\n    if (/(\\.[^.\\/])/.test(path)) {\n      if (segsLength > 1) {\n        return segs;\n      } else {\n        return [str];\n      }\n    }\n\n    val = splice(str, outter, path);\n\n    if (/\\{[^{}]+?\\}/.test(val)) {\n      arr = braces(val, arr, opts);\n    } else if (val !== '') {\n      if (opts.nodupes && arr.indexOf(val) !== -1) {\n        continue;\n      }\n\n      arr.push(es6 ? tokens.after(val) : val);\n    }\n  }\n\n  if (opts.strict) {\n    return filter(arr, filterEmpty);\n  }\n\n  return arr;\n}\n/**\n * Expand exponential ranges\n *\n *   `a{,}{,}` => ['a', 'a', 'a', 'a']\n */\n\n\nfunction exponential(str, options, fn) {\n  if (typeof options === 'function') {\n    fn = options;\n    options = null;\n  }\n\n  var opts = options || {};\n  var esc = '__ESC_EXP__';\n  var exp = 0;\n  var res;\n  var parts = str.split('{,}');\n\n  if (opts.nodupes) {\n    return fn(parts.join(''), opts);\n  }\n\n  exp = parts.length - 1;\n  res = fn(parts.join(esc), opts);\n  var len = res.length;\n  var arr = [];\n  var i = 0;\n\n  while (len--) {\n    var ele = res[i++];\n    var idx = ele.indexOf(esc);\n\n    if (idx === -1) {\n      arr.push(ele);\n    } else {\n      ele = ele.split('__ESC_EXP__').join('');\n\n      if (!!ele && opts.nodupes !== false) {\n        arr.push(ele);\n      } else {\n        var num = Math.pow(2, exp);\n        arr.push.apply(arr, repeat(ele, num));\n      }\n    }\n  }\n\n  return arr;\n}\n/**\n * Wrap a value with parens, brackets or braces,\n * based on the given character/separator.\n *\n * @param  {String|Array} `val`\n * @param  {String} `ch`\n * @return {String}\n */\n\n\nfunction wrap(val, ch) {\n  if (ch === '|') {\n    return '(' + val.join(ch) + ')';\n  }\n\n  if (ch === ',') {\n    return '{' + val.join(ch) + '}';\n  }\n\n  if (ch === '-') {\n    return '[' + val.join(ch) + ']';\n  }\n\n  if (ch === '\\\\') {\n    return '\\\\{' + val + '\\\\}';\n  }\n}\n/**\n * Handle empty braces: `{}`\n */\n\n\nfunction emptyBraces(str, arr, opts) {\n  return braces(str.split('{}').join('\\\\{\\\\}'), arr, opts);\n}\n/**\n * Filter out empty-ish values\n */\n\n\nfunction filterEmpty(ele) {\n  return !!ele && ele !== '\\\\';\n}\n/**\n * Handle patterns with whitespace\n */\n\n\nfunction splitWhitespace(str) {\n  var segs = str.split(' ');\n  var len = segs.length;\n  var res = [];\n  var i = 0;\n\n  while (len--) {\n    res.push.apply(res, braces(segs[i++]));\n  }\n\n  return res;\n}\n/**\n * Handle escaped braces: `\\\\{foo,bar}`\n */\n\n\nfunction escapeBraces(str, arr, opts) {\n  if (!/\\{[^{]+\\{/.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\{').join('__LT_BRACE__');\n    str = str.split('\\\\}').join('__RT_BRACE__');\n    return map(braces(str, arr, opts), function (ele) {\n      ele = ele.split('__LT_BRACE__').join('{');\n      return ele.split('__RT_BRACE__').join('}');\n    });\n  }\n}\n/**\n * Handle escaped dots: `{1\\\\.2}`\n */\n\n\nfunction escapeDots(str, arr, opts) {\n  if (!/[^\\\\]\\..+\\\\\\./.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\.').join('__ESC_DOT__');\n    return map(braces(str, arr, opts), function (ele) {\n      return ele.split('__ESC_DOT__').join('.');\n    });\n  }\n}\n/**\n * Handle escaped dots: `{1\\\\.2}`\n */\n\n\nfunction escapePaths(str, arr, opts) {\n  str = str.split('\\/.').join('__ESC_PATH__');\n  return map(braces(str, arr, opts), function (ele) {\n    return ele.split('__ESC_PATH__').join('\\/.');\n  });\n}\n/**\n * Handle escaped commas: `{a\\\\,b}`\n */\n\n\nfunction escapeCommas(str, arr, opts) {\n  if (!/\\w,/.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\,').join('__ESC_COMMA__');\n    return map(braces(str, arr, opts), function (ele) {\n      return ele.split('__ESC_COMMA__').join(',');\n    });\n  }\n}\n/**\n * Regex for common patterns\n */\n\n\nfunction patternRegex() {\n  return /\\${|( (?=[{,}])|(?=[{,}]) )|{}|{,}|\\\\,(?=.*[{}])|\\/\\.(?=.*[{}])|\\\\\\.(?={)|\\\\{|\\\\}/;\n}\n/**\n * Braces regex.\n */\n\n\nfunction braceRegex() {\n  return /.*(\\\\?\\{([^}]+)\\})/;\n}\n/**\n * es6 delimiter regex.\n */\n\n\nfunction es6Regex() {\n  return /\\$\\{([^}]+)\\}/;\n}\n\nvar braceRe;\nvar patternRe;\n/**\n * Faster alternative to `String.replace()` when the\n * index of the token to be replaces can't be supplied\n */\n\nfunction splice(str, token, replacement) {\n  var i = str.indexOf(token);\n  return str.substr(0, i) + replacement + str.substr(i + token.length);\n}\n/**\n * Fast array map\n */\n\n\nfunction map(arr, fn) {\n  if (arr == null) {\n    return [];\n  }\n\n  var len = arr.length;\n  var res = new Array(len);\n  var i = -1;\n\n  while (++i < len) {\n    res[i] = fn(arr[i], i, arr);\n  }\n\n  return res;\n}\n/**\n * Fast array filter\n */\n\n\nfunction filter(arr, cb) {\n  if (arr == null) return [];\n\n  if (typeof cb !== 'function') {\n    throw new TypeError('braces: filter expects a callback function.');\n  }\n\n  var len = arr.length;\n  var res = arr.slice();\n  var i = 0;\n\n  while (len--) {\n    if (!cb(arr[len], i++)) {\n      res.splice(len, 1);\n    }\n  }\n\n  return res;\n}","map":null,"metadata":{},"sourceType":"script"}