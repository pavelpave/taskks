{"ast":null,"code":"'use strict';\n\nvar templateSTR = \"(function(f){if(typeof exports===\\\"object\\\"&&typeof module!==\\\"undefined\\\"){module.exports=f()}else if(typeof define===\\\"function\\\"&&define.amd){define([],f)}else{var g;if(typeof window!==\\\"undefined\\\"){g=window}else if(typeof global!==\\\"undefined\\\"){g=global}else if(typeof self!==\\\"undefined\\\"){g=self}else{g=this}defineNamespace()}})(function(){source()});\\n\";\n\nfunction template(moduleName, options) {\n  if (typeof options === 'boolean') {\n    options = {\n      commonJS: options\n    };\n  } else if (!options) {\n    options = {};\n  }\n\n  var str = templateSTR.replace(/defineNamespace\\(\\)/g, compileNamespace(moduleName)).split('source()');\n  str[0] = str[0].trim(); //make sure these are undefined so as to not get confused if modules have inner UMD systems\n\n  str[0] += 'var define,module,exports;';\n  if (options.commonJS) str[0] += 'module={exports:(exports={})};';\n  str[0] += '\\n';\n  if (options.commonJS) str[1] = 'return module.exports;' + str[1];\n  str[1] = '\\n' + str[1];\n  return str;\n}\n\nexports = module.exports = function (name, src, options) {\n  if (typeof options === 'string' && typeof src === 'object') {\n    var tmp = options;\n    options = src;\n    src = tmp;\n  }\n\n  return exports.prelude(name, options) + src + exports.postlude(name, options);\n};\n\nexports.prelude = function (moduleName, options) {\n  return template(moduleName, options)[0];\n};\n\nexports.postlude = function (moduleName, options) {\n  return template(moduleName, options)[1];\n};\n\nfunction camelCase(name) {\n  name = name.replace(/\\-([a-z])/g, function (_, char) {\n    return char.toUpperCase();\n  });\n\n  if (!/^[a-zA-Z_$]$/.test(name[0])) {\n    name = name.substr(1);\n  }\n\n  var result = name.replace(/[^\\w$]+/g, '');\n\n  if (!result) {\n    throw new Error('Invalid JavaScript identifier resulted from camel-casing');\n  }\n\n  return result;\n}\n\nfunction compileNamespace(name) {\n  var names = name.split('.'); // No namespaces, yield the best case 'global.NAME = VALUE'\n\n  if (names.length === 1) {\n    return 'g.' + camelCase(name) + ' = f()'; // Acceptable case, with reasonable compilation\n  } else if (names.length === 2) {\n    names = names.map(camelCase);\n    return '(g.' + names[0] + ' || (g.' + names[0] + ' = {})).' + names[1] + ' = f()'; // Worst case, too many namespaces to care about\n  } else {\n    var valueContainer = names.pop();\n    return names.map(compileNamespaceStep).concat(['g.' + camelCase(valueContainer) + ' = f()']).join(';');\n  }\n}\n\nfunction compileNamespaceStep(name) {\n  name = camelCase(name);\n  return 'g=(g.' + name + '||(g.' + name + ' = {}))';\n}","map":null,"metadata":{},"sourceType":"script"}